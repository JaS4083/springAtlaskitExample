{"version":3,"file":"history.production.min.js","sources":["../../packages/history/history.js"],"sourcesContent":["const PopAction = 'POP';\nconst PushAction = 'PUSH';\nconst ReplaceAction = 'REPLACE';\n\nconst BeforeUnloadEventType = 'beforeunload';\nconst HashChangeEventType = 'hashchange';\nconst PopStateEventType = 'popstate';\n\nconst readOnly = __DEV__ ? obj => Object.freeze(obj) : obj => obj;\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// BROWSER\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Browser history stores the location in regular URLs. This is the\n * standard for most web apps, but it requires some configuration on\n * the server to ensure you serve the same app at multiple URLs.\n */\nexport function createBrowserHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname, search, hash } = window.location;\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HASH\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Hash history stores the location in window.location.hash. This makes\n * it ideal for situations where you don't want to send the location to\n * the server for some reason, either because you do cannot configure it\n * or the URL space is reserved for something else.\n */\nexport function createHashHistory({ window = document.defaultView } = {}) {\n  let globalHistory = window.history;\n\n  function getIndexAndLocation() {\n    let { pathname = '/', search = '', hash = '' } = parsePath(\n      window.location.hash.substr(1)\n    );\n    let state = globalHistory.state || {};\n    return [\n      state.idx,\n      readOnly({\n        pathname,\n        search,\n        hash,\n        state: state.usr || null,\n        key: state.key || 'default'\n      })\n    ];\n  }\n\n  let blockedPopTx = null;\n  function handlePop() {\n    if (blockedPopTx) {\n      blockers.call(blockedPopTx);\n      blockedPopTx = null;\n    } else {\n      let nextAction = PopAction;\n      let [nextIndex, nextLocation] = getIndexAndLocation();\n\n      if (blockers.length) {\n        if (nextIndex != null) {\n          let n = index - nextIndex;\n          if (n) {\n            // Revert the POP\n            blockedPopTx = {\n              action: nextAction,\n              location: nextLocation,\n              retry() {\n                go(n * -1);\n              }\n            };\n\n            go(n);\n          }\n        } else {\n          // Trying to POP to a location with no index. We did not create\n          // this location, so we can't effectively block the navigation.\n          warning(\n            false,\n            // TODO: Write up a doc that explains our blocking strategy in\n            // detail and link to it here so people can understand better\n            // what is going on and how to avoid it.\n            `You are trying to block a POP navigation to a location that was not ` +\n              `created by the history library. The block will fail silently in ` +\n              `production, but in general you should do all navigation with the ` +\n              `history library (instead of using window.history.pushState directly) ` +\n              `to avoid this situation.`\n          );\n        }\n      } else {\n        applyTx(nextAction);\n      }\n    }\n  }\n\n  window.addEventListener(PopStateEventType, handlePop);\n\n  // popstate does not fire on hashchange in IE 11 and old (trident) Edge\n  // https://developer.mozilla.org/de/docs/Web/API/Window/popstate_event\n  window.addEventListener(HashChangeEventType, event => {\n    let [, nextLocation] = getIndexAndLocation();\n\n    // Ignore extraneous hashchange events.\n    if (createPath(nextLocation) !== createPath(location)) {\n      handlePop();\n    }\n  });\n\n  let action = PopAction;\n  let [index, location] = getIndexAndLocation();\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, null);\n  }\n\n  function getBaseHref() {\n    let base = document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href;\n  }\n\n  function createHref(to) {\n    return getBaseHref() + '#' + (typeof to === 'string' ? to : createPath(to));\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function getHistoryStateAndUrl(nextLocation, index) {\n    return [\n      {\n        usr: nextLocation.state,\n        key: nextLocation.key,\n        idx: index\n      },\n      createHref(nextLocation)\n    ];\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction) {\n    action = nextAction;\n    [index, location] = getIndexAndLocation();\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index + 1);\n\n      // TODO: Support forced reloading\n      // try...catch because iOS limits us to 100 pushState calls :/\n      try {\n        globalHistory.pushState(historyState, null, url);\n      } catch (error) {\n        // They are going to lose state here, but there is no real\n        // way to warn them about it since the page will refresh...\n        window.location.assign(url);\n      }\n\n      applyTx(nextAction);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      nextLocation.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in hash history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      let [historyState, url] = getHistoryStateAndUrl(nextLocation, index);\n\n      // TODO: Support forced reloading\n      globalHistory.replaceState(historyState, null, url);\n\n      applyTx(nextAction);\n    }\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      let unblock = blockers.push(fn);\n\n      if (blockers.length === 1) {\n        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);\n      }\n\n      return function() {\n        unblock();\n\n        // Remove the beforeunload listener so the document may\n        // still be salvageable in the pagehide event.\n        // See https://html.spec.whatwg.org/#unloading-documents\n        if (!blockers.length) {\n          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);\n        }\n      };\n    }\n  };\n\n  return history;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// MEMORY\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Memory history stores the current location in memory. It is designed\n * for use in stateful non-browser environments like headless tests (in\n * node.js) and React Native.\n */\nexport function createMemoryHistory({\n  initialEntries = ['/'],\n  initialIndex = 0\n} = {}) {\n  let entries = initialEntries.map(entry => {\n    let location = readOnly({\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null,\n      key: createKey(),\n      ...(typeof entry === 'string' ? parsePath(entry) : entry)\n    });\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in createMemoryHistory({ initialEntries }) (invalid entry: ${JSON.stringify(\n        entry\n      )})`\n    );\n\n    return location;\n  });\n  let index = clamp(initialIndex, 0, entries.length - 1);\n\n  let action = PopAction;\n  let location = entries[index];\n  let blockers = createEvents();\n  let listeners = createEvents();\n\n  function createHref(to) {\n    return typeof to === 'string' ? to : createPath(to);\n  }\n\n  function getNextLocation(to, state = null) {\n    return readOnly({\n      ...location,\n      ...(typeof to === 'string' ? parsePath(to) : to),\n      state,\n      key: createKey()\n    });\n  }\n\n  function allowTx(action, location, retry) {\n    return (\n      !blockers.length || (blockers.call({ action, location, retry }), false)\n    );\n  }\n\n  function applyTx(nextAction, nextLocation) {\n    action = nextAction;\n    location = nextLocation;\n    listeners.call({ action, location });\n  }\n\n  function push(to, state) {\n    let nextAction = PushAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      push(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.push(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function replace(to, state) {\n    let nextAction = ReplaceAction;\n    let nextLocation = getNextLocation(to, state);\n    function retry() {\n      replace(to, state);\n    }\n\n    warning(\n      location.pathname.charAt(0) === '/',\n      `Relative pathnames are not supported in memory history.replace(${JSON.stringify(\n        to\n      )})`\n    );\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      entries[index] = nextLocation;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  function go(n) {\n    let nextIndex = clamp(index + n, 0, entries.length - 1);\n    let nextAction = PopAction;\n    let nextLocation = entries[nextIndex];\n    function retry() {\n      go(n);\n    }\n\n    if (allowTx(nextAction, nextLocation, retry)) {\n      index = nextIndex;\n      applyTx(nextAction, nextLocation);\n    }\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return location;\n    },\n    createHref,\n    push,\n    replace,\n    go,\n    back() {\n      go(-1);\n    },\n    forward() {\n      go(1);\n    },\n    listen(fn) {\n      return listeners.push(fn);\n    },\n    block(fn) {\n      return blockers.push(fn);\n    }\n  };\n\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction promptBeforeUnload(event) {\n  // Cancel the event.\n  event.preventDefault();\n  // Chrome (and legacy IE) requires returnValue to be set.\n  event.returnValue = '';\n}\n\nfunction createEvents() {\n  let handlers = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn) {\n      handlers.push(fn);\n      return function() {\n        handlers = handlers.filter(handler => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach(fn => fn && fn(arg));\n    }\n  };\n}\n\nfunction createKey() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 8);\n}\n\nexport function createPath({ pathname = '/', search = '', hash = '' }) {\n  return pathname + search + hash;\n}\n\nexport function parsePath(path) {\n  let pieces = {};\n\n  if (path) {\n    let hashIndex = path.indexOf('#');\n    if (hashIndex >= 0) {\n      pieces.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf('?');\n    if (searchIndex >= 0) {\n      pieces.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      pieces.pathname = path;\n    }\n  }\n\n  return pieces;\n}\n"],"names":["event","createEvents","length","handlers","handler","fn","forEach","arg","createKey","random","Math","pathname","createPath","hash","g","parsePath","path","pieces","hashIndex","searchIndex","window","search","state","obj","a","to","getNextLocation","m","action","location","listeners","n","globalHistory","blockedPopTx","blockers","nextIndex","nextLocation","getIndexAndLocation","index","retry","go","idx","history","createHref","push","q","c","historyState","url","usr","key","error","applyTx","replace","back","forward","listen","block","unblock","promptBeforeUnload","l","t","document","href","nextAction","handlePop","initialEntries","allowTx","d","lowerBound","entries","entry","initialIndex","h"],"mappings":"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"}