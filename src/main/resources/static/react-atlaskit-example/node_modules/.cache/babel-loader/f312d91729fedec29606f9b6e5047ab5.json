{"ast":null,"code":"import { __makeTemplateObject } from \"tslib\";\nimport { css } from 'styled-components';\nimport { themed } from '@atlaskit/theme/components';\nimport { B200, N70A, N200A, DN80A, background } from '@atlaskit/theme/colors';\nimport { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH, TRANSITION_DURATION } from './constants';\nvar backgroundColorFocus = B200;\nvar overlayColorDefault = 'transparent';\nvar overlayColorHover = N70A;\nvar overlayColorSelected = N200A;\nvar overlayColorDisabled = themed({\n  light: 'rgba(255, 255, 255, 0.7)',\n  dark: DN80A\n}); // \"square\" avatars are explicit\n\nexport function getBorderRadius(props, config) {\n  if (config === void 0) {\n    config = {\n      includeBorderWidth: false\n    };\n  }\n\n  var borderWidth = config.includeBorderWidth ? BORDER_WIDTH[props.size] : 0;\n  return props.appearance === 'circle' ? '50%' : AVATAR_RADIUS[props.size] + borderWidth + \"px\";\n}\nexport var getSize = function (_a) {\n  var size = _a.size;\n  return AVATAR_SIZES[size];\n}; // for testing\n\nexport function getAvatarDimensions(_a, config) {\n  var size = _a.size;\n\n  if (config === void 0) {\n    config = {\n      includeBorderWidth: false,\n      sizeOnly: false\n    };\n  }\n\n  var borderWidth = config.includeBorderWidth ? BORDER_WIDTH[size] * 2 : 0;\n  var finalSize = AVATAR_SIZES[size] + borderWidth;\n  return config.sizeOnly ? finalSize : \"\\n    height: \" + finalSize + \"px;\\n    width: \" + finalSize + \"px;\\n  \";\n} // expose here for use with multiple element types\n\nexport function getInnerStyles(props) {\n  if (props === void 0) {\n    props = {\n      appearance: 'circle',\n      size: 'medium'\n    };\n  }\n\n  var boxSizing = 'content-box';\n  var borderWidth = BORDER_WIDTH[props.size] + \"px\";\n  var isInteractive = Boolean(props.isInteractive || props.href || props.onClick); // We make the distinction between isInteractive and isClickable as supplying a tooltip\n  // makes the avatar interactive but not clickable\n\n  var isClickable = Boolean(props.href || props.onClick);\n  var backgroundColor = props.borderColor || background; // Inherit cursor styles so we don't cancel out pointer cursors in places like avatar group more dropdown\n\n  var cursor = 'inherit';\n  var outline = 'none';\n  var overlayShade = overlayColorDefault;\n  var overlayOpacity = 0;\n  var pointerEvents = 'auto';\n  var position = 'static';\n  var transform = 'translateZ(0)';\n  var transitionDuration = '0s'; // Interaction: Hover\n\n  if (isInteractive && (props.isActive || props.isHover)) {\n    overlayShade = overlayColorHover;\n    overlayOpacity = 1;\n  } // Interaction: Active\n\n\n  if (isClickable && props.isActive) {\n    transform = 'scale(0.9)';\n  } // Interaction: Focus\n\n\n  if (isInteractive && props.isFocus && !props.isActive) {\n    outline = 'none';\n    backgroundColor = backgroundColorFocus;\n    transitionDuration = TRANSITION_DURATION;\n  } // Disabled\n\n\n  if (props.isDisabled) {\n    cursor = 'not-allowed';\n    overlayShade = overlayColorDisabled;\n    overlayOpacity = 1;\n    pointerEvents = 'none';\n  } // Clickable\n\n\n  if (isClickable) {\n    cursor = 'pointer';\n  } // Loading\n\n\n  if (props.isSelected) {\n    overlayShade = overlayColorSelected;\n    overlayOpacity = 1;\n  } // Stack\n\n\n  if (props.stackIndex) {\n    position = 'relative';\n  }\n\n  return css(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    \", \";\\n    align-items: stretch;\\n    background-color: \", \";\\n    border: 0;\\n    border-radius: \", \";\\n    padding: \", \";\\n    box-sizing: \", \";\\n    cursor: \", \";\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    outline: \", \";\\n    overflow: hidden;\\n    pointer-events: \", \";\\n    position: \", \";\\n    transform: \", \";\\n    transition: background-color \", \" ease-out;\\n\\n    a &,\\n    button & {\\n      cursor: pointer;\\n    }\\n\\n    &::after {\\n      background-color: \", \";\\n      border-radius: \", \";\\n      bottom: \", \";\\n      content: ' ';\\n      left: \", \";\\n      opacity: \", \";\\n      pointer-events: none;\\n      position: absolute;\\n      right: \", \";\\n      top: \", \";\\n      transition: opacity \", \";\\n    }\\n\\n    &::-moz-focus-inner {\\n      border: 0;\\n      margin: 0;\\n      padding: 0;\\n    }\\n  \"], [\"\\n    \", \";\\n    align-items: stretch;\\n    background-color: \", \";\\n    border: 0;\\n    border-radius: \", \";\\n    padding: \", \";\\n    box-sizing: \", \";\\n    cursor: \", \";\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    outline: \", \";\\n    overflow: hidden;\\n    pointer-events: \", \";\\n    position: \", \";\\n    transform: \", \";\\n    transition: background-color \", \" ease-out;\\n\\n    a &,\\n    button & {\\n      cursor: pointer;\\n    }\\n\\n    &::after {\\n      background-color: \", \";\\n      border-radius: \", \";\\n      bottom: \", \";\\n      content: ' ';\\n      left: \", \";\\n      opacity: \", \";\\n      pointer-events: none;\\n      position: absolute;\\n      right: \", \";\\n      top: \", \";\\n      transition: opacity \", \";\\n    }\\n\\n    &::-moz-focus-inner {\\n      border: 0;\\n      margin: 0;\\n      padding: 0;\\n    }\\n  \"])), getAvatarDimensions, backgroundColor, function (p) {\n    return getBorderRadius(p, {\n      includeBorderWidth: true\n    });\n  }, borderWidth, boxSizing, cursor, outline, pointerEvents, position, transform, transitionDuration, overlayShade, getBorderRadius, borderWidth, borderWidth, overlayOpacity, borderWidth, borderWidth, TRANSITION_DURATION);\n}\nvar templateObject_1;","map":{"version":3,"sources":["../../../src/styled/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __makeTemplateObject } from \"tslib\";\nimport { css } from 'styled-components';\nimport { themed } from '@atlaskit/theme/components';\nimport { B200, N70A, N200A, DN80A, background } from '@atlaskit/theme/colors';\nimport { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH, TRANSITION_DURATION, } from './constants';\nvar backgroundColorFocus = B200;\nvar overlayColorDefault = 'transparent';\nvar overlayColorHover = N70A;\nvar overlayColorSelected = N200A;\nvar overlayColorDisabled = themed({\n    light: 'rgba(255, 255, 255, 0.7)',\n    dark: DN80A,\n});\n// \"square\" avatars are explicit\nexport function getBorderRadius(props, config) {\n    if (config === void 0) { config = { includeBorderWidth: false }; }\n    var borderWidth = config.includeBorderWidth\n        ? BORDER_WIDTH[props.size]\n        : 0;\n    return props.appearance === 'circle'\n        ? '50%'\n        : AVATAR_RADIUS[props.size] + borderWidth + \"px\";\n}\nexport var getSize = function (_a) {\n    var size = _a.size;\n    return AVATAR_SIZES[size];\n}; // for testing\nexport function getAvatarDimensions(_a, config) {\n    var size = _a.size;\n    if (config === void 0) { config = {\n        includeBorderWidth: false,\n        sizeOnly: false,\n    }; }\n    var borderWidth = config.includeBorderWidth\n        ? BORDER_WIDTH[size] * 2\n        : 0;\n    var finalSize = AVATAR_SIZES[size] + borderWidth;\n    return config.sizeOnly\n        ? finalSize\n        : \"\\n    height: \" + finalSize + \"px;\\n    width: \" + finalSize + \"px;\\n  \";\n}\n// expose here for use with multiple element types\nexport function getInnerStyles(props) {\n    if (props === void 0) { props = { appearance: 'circle', size: 'medium' }; }\n    var boxSizing = 'content-box';\n    var borderWidth = BORDER_WIDTH[props.size] + \"px\";\n    var isInteractive = Boolean(props.isInteractive || props.href || props.onClick);\n    // We make the distinction between isInteractive and isClickable as supplying a tooltip\n    // makes the avatar interactive but not clickable\n    var isClickable = Boolean(props.href || props.onClick);\n    var backgroundColor = props.borderColor || background;\n    // Inherit cursor styles so we don't cancel out pointer cursors in places like avatar group more dropdown\n    var cursor = 'inherit';\n    var outline = 'none';\n    var overlayShade = overlayColorDefault;\n    var overlayOpacity = 0;\n    var pointerEvents = 'auto';\n    var position = 'static';\n    var transform = 'translateZ(0)';\n    var transitionDuration = '0s';\n    // Interaction: Hover\n    if (isInteractive && (props.isActive || props.isHover)) {\n        overlayShade = overlayColorHover;\n        overlayOpacity = 1;\n    }\n    // Interaction: Active\n    if (isClickable && props.isActive) {\n        transform = 'scale(0.9)';\n    }\n    // Interaction: Focus\n    if (isInteractive && props.isFocus && !props.isActive) {\n        outline = 'none';\n        backgroundColor = backgroundColorFocus;\n        transitionDuration = TRANSITION_DURATION;\n    }\n    // Disabled\n    if (props.isDisabled) {\n        cursor = 'not-allowed';\n        overlayShade = overlayColorDisabled;\n        overlayOpacity = 1;\n        pointerEvents = 'none';\n    }\n    // Clickable\n    if (isClickable) {\n        cursor = 'pointer';\n    }\n    // Loading\n    if (props.isSelected) {\n        overlayShade = overlayColorSelected;\n        overlayOpacity = 1;\n    }\n    // Stack\n    if (props.stackIndex) {\n        position = 'relative';\n    }\n    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    \", \";\\n    align-items: stretch;\\n    background-color: \", \";\\n    border: 0;\\n    border-radius: \", \";\\n    padding: \", \";\\n    box-sizing: \", \";\\n    cursor: \", \";\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    outline: \", \";\\n    overflow: hidden;\\n    pointer-events: \", \";\\n    position: \", \";\\n    transform: \", \";\\n    transition: background-color \", \" ease-out;\\n\\n    a &,\\n    button & {\\n      cursor: pointer;\\n    }\\n\\n    &::after {\\n      background-color: \", \";\\n      border-radius: \", \";\\n      bottom: \", \";\\n      content: ' ';\\n      left: \", \";\\n      opacity: \", \";\\n      pointer-events: none;\\n      position: absolute;\\n      right: \", \";\\n      top: \", \";\\n      transition: opacity \", \";\\n    }\\n\\n    &::-moz-focus-inner {\\n      border: 0;\\n      margin: 0;\\n      padding: 0;\\n    }\\n  \"], [\"\\n    \", \";\\n    align-items: stretch;\\n    background-color: \", \";\\n    border: 0;\\n    border-radius: \", \";\\n    padding: \", \";\\n    box-sizing: \", \";\\n    cursor: \", \";\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    outline: \", \";\\n    overflow: hidden;\\n    pointer-events: \", \";\\n    position: \", \";\\n    transform: \", \";\\n    transition: background-color \", \" ease-out;\\n\\n    a &,\\n    button & {\\n      cursor: pointer;\\n    }\\n\\n    &::after {\\n      background-color: \", \";\\n      border-radius: \", \";\\n      bottom: \", \";\\n      content: ' ';\\n      left: \", \";\\n      opacity: \", \";\\n      pointer-events: none;\\n      position: absolute;\\n      right: \", \";\\n      top: \", \";\\n      transition: opacity \", \";\\n    }\\n\\n    &::-moz-focus-inner {\\n      border: 0;\\n      margin: 0;\\n      padding: 0;\\n    }\\n  \"])), getAvatarDimensions, backgroundColor, function (p) { return getBorderRadius(p, { includeBorderWidth: true }); }, borderWidth, boxSizing, cursor, outline, pointerEvents, position, transform, transitionDuration, overlayShade, getBorderRadius, borderWidth, borderWidth, overlayOpacity, borderWidth, borderWidth, TRANSITION_DURATION);\n}\nvar templateObject_1;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}