{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React, { Component, Fragment } from 'react';\nimport { NavigationAnalyticsContext } from '@atlaskit/analytics-namespaced-context';\nimport { withNavigationUIController } from '../../../ui-controller';\nimport { ViewControllerSubscriber } from '../../../view-controller';\nimport LayoutManager from '../../presentational/LayoutManager';\nimport LayerInitialised from '../../presentational/LayerInitialised';\n/* NOTE: experimental props use an underscore */\n\n/* eslint-disable camelcase */\n\nvar AsyncLayoutManagerWithViewControllerBase = /*#__PURE__*/function (_Component) {\n  _inherits(AsyncLayoutManagerWithViewControllerBase, _Component);\n\n  function AsyncLayoutManagerWithViewControllerBase(props) {\n    var _this;\n\n    _classCallCheck(this, AsyncLayoutManagerWithViewControllerBase);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncLayoutManagerWithViewControllerBase).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      hasInitialised: false,\n      outgoingView: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInitialised\", function () {\n      _this.setState({\n        hasInitialised: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSkeleton\", function () {\n      var ContainerSkeleton = _this.props.containerSkeleton;\n      return ___EmotionJSX(ContainerSkeleton, {\n        type: _this.props.firstSkeletonToRender\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderContainerNavigation\", function () {\n      var _this$props = _this.props,\n          firstSkeletonToRender = _this$props.firstSkeletonToRender,\n          view = _this$props.view;\n      var outgoingView = _this.state.outgoingView;\n\n      if (view && view.type === 'container') {\n        return _this.renderView(view);\n      }\n\n      if (outgoingView && outgoingView.type === 'container') {\n        return _this.renderView(outgoingView);\n      }\n\n      if (!view && firstSkeletonToRender === 'container' && !_this.state.hasInitialised) {\n        return _this.renderSkeleton();\n      }\n\n      return firstSkeletonToRender !== 'container' ? null : _this.renderSkeleton();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderGlobalNavigation\", function () {\n      var _this$props2 = _this.props,\n          GlobalNavigation = _this$props2.globalNavigation,\n          view = _this$props2.view;\n      var hasInitialised = _this.state.hasInitialised;\n      /* We are embedding the LayerInitialised analytics component within global navigation so that\n       * the event it fires can access the analytics context within LayerManager. The component\n       * cannot be rendered directly within LayerManager since it needs access to view data which\n       * only exists in LayoutManagerWithViewController. */\n\n      return ___EmotionJSX(Fragment, null, ___EmotionJSX(GlobalNavigation, null), ___EmotionJSX(LayerInitialised, {\n        activeView: view,\n        initialised: hasInitialised,\n        onInitialised: _this.onInitialised\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProductNavigation\", function () {\n      var view = _this.props.view;\n      var outgoingView = _this.state.outgoingView;\n\n      if (view && view.type === 'product') {\n        return _this.renderView(view);\n      } // If we're transitioning from a product view to a container view still\n      // render the outgoing product view.\n\n\n      if (view && view.type === 'container' && outgoingView && outgoingView.type === 'product') {\n        return _this.renderView(outgoingView);\n      }\n\n      return _this.renderSkeleton();\n    });\n\n    _this.renderContainerNavigation.displayName = 'ContainerNavigationRenderer';\n    _this.renderProductNavigation.displayName = 'ProductNavigationRenderer';\n    return _this;\n  }\n\n  _createClass(AsyncLayoutManagerWithViewControllerBase, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var view = this.props.view;\n      var prevView = prevProps.view;\n\n      if (!view || !prevView) {\n        return;\n      } // If we're moving from a product to a container view or vice versa we cache\n      // the previous view so that we can still render it during the transition.\n\n\n      if (view.type !== prevView.type) {\n        // It's totally fine to setState in componentDidUpdate as long as it's\n        // wrapped in a condition:\n        // https://reactjs.org/docs/react-component.html#componentdidupdate\n        // eslint-disable-next-line\n        this.setState({\n          outgoingView: prevView\n        });\n      }\n    }\n  }, {\n    key: \"renderView\",\n    value: function renderView(view) {\n      var _this$props3 = this.props,\n          customComponents = _this$props3.customComponents,\n          ItemsRenderer = _this$props3.itemsRenderer;\n      return ___EmotionJSX(ItemsRenderer, {\n        customComponents: customComponents,\n        items: view.data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          datasets = _this$props4.datasets,\n          experimental_alternateFlyoutBehaviour = _this$props4.experimental_alternateFlyoutBehaviour,\n          experimental_flyoutOnHover = _this$props4.experimental_flyoutOnHover,\n          experimental_fullWidthFlyout = _this$props4.experimental_fullWidthFlyout,\n          experimental_hideNavVisuallyOnCollapse = _this$props4.experimental_hideNavVisuallyOnCollapse,\n          experimental_horizontalGlobalNav = _this$props4.experimental_horizontalGlobalNav,\n          firstSkeletonToRender = _this$props4.firstSkeletonToRender,\n          onExpandStart = _this$props4.onExpandStart,\n          onExpandEnd = _this$props4.onExpandEnd,\n          onCollapseStart = _this$props4.onCollapseStart,\n          onCollapseEnd = _this$props4.onCollapseEnd,\n          getRefs = _this$props4.getRefs,\n          view = _this$props4.view,\n          topOffset = _this$props4.topOffset,\n          shouldHideGlobalNavShadow = _this$props4.shouldHideGlobalNavShadow,\n          showContextualNavigation = _this$props4.showContextualNavigation;\n      return ___EmotionJSX(NavigationAnalyticsContext, {\n        data: {\n          attributes: _objectSpread({\n            navigationLayer: view && view.type,\n            view: view && view.id\n          }, view && view.analyticsAttributes)\n        }\n      }, ___EmotionJSX(LayoutManager, {\n        globalNavigation: this.renderGlobalNavigation,\n        containerNavigation: view && view.type === 'container' || !view && firstSkeletonToRender === 'container' && !this.state.hasInitialised ? this.renderContainerNavigation : null,\n        experimental_alternateFlyoutBehaviour: experimental_alternateFlyoutBehaviour,\n        experimental_flyoutOnHover: experimental_flyoutOnHover,\n        experimental_fullWidthFlyout: experimental_fullWidthFlyout,\n        experimental_hideNavVisuallyOnCollapse: experimental_hideNavVisuallyOnCollapse,\n        experimental_horizontalGlobalNav: experimental_horizontalGlobalNav,\n        productNavigation: this.renderProductNavigation,\n        onExpandStart: onExpandStart,\n        onExpandEnd: onExpandEnd,\n        onCollapseStart: onCollapseStart,\n        onCollapseEnd: onCollapseEnd,\n        getRefs: getRefs,\n        topOffset: topOffset,\n        shouldHideGlobalNavShadow: shouldHideGlobalNavShadow,\n        showContextualNavigation: showContextualNavigation,\n        datasets: datasets,\n        view: view\n      }, children));\n    }\n  }]);\n\n  return AsyncLayoutManagerWithViewControllerBase;\n}(Component);\n\n_defineProperty(AsyncLayoutManagerWithViewControllerBase, \"defaultProps\", {\n  experimental_alternateFlyoutBehaviour: false,\n  experimental_flyoutOnHover: false,\n  experimental_fullWidthFlyout: false,\n  experimental_hideNavVisuallyOnCollapse: false,\n  experimental_horizontalGlobalNav: false\n});\n\nvar AsyncLayoutManagerWithView = function AsyncLayoutManagerWithView( // eslint-disable-next-line no-undef\nprops) {\n  return ___EmotionJSX(ViewControllerSubscriber, null, function (_ref) {\n    var activeView = _ref.state.activeView;\n    return ___EmotionJSX(AsyncLayoutManagerWithViewControllerBase, _extends({\n      view: activeView\n    }, props));\n  });\n};\n\nexport default withNavigationUIController(AsyncLayoutManagerWithView);","map":{"version":3,"sources":["/home/asirob/Code/atlasmicros/src/main/resources/static/react-atlaskit-example/node_modules/@atlaskit/navigation-next/dist/esm/components/connected/AsyncLayoutManagerWithViewController/AsyncLayoutManagerWithViewController.js"],"names":["_extends","_objectSpread","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_defineProperty","jsx","___EmotionJSX","React","Component","Fragment","NavigationAnalyticsContext","withNavigationUIController","ViewControllerSubscriber","LayoutManager","LayerInitialised","AsyncLayoutManagerWithViewControllerBase","_Component","props","_this","call","hasInitialised","outgoingView","setState","ContainerSkeleton","containerSkeleton","type","firstSkeletonToRender","_this$props","view","state","renderView","renderSkeleton","_this$props2","GlobalNavigation","globalNavigation","activeView","initialised","onInitialised","renderContainerNavigation","displayName","renderProductNavigation","key","value","componentDidUpdate","prevProps","prevView","_this$props3","customComponents","ItemsRenderer","itemsRenderer","items","data","render","_this$props4","children","datasets","experimental_alternateFlyoutBehaviour","experimental_flyoutOnHover","experimental_fullWidthFlyout","experimental_hideNavVisuallyOnCollapse","experimental_horizontalGlobalNav","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","getRefs","topOffset","shouldHideGlobalNavShadow","showContextualNavigation","attributes","navigationLayer","id","analyticsAttributes","renderGlobalNavigation","containerNavigation","productNavigation","AsyncLayoutManagerWithView","_ref"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,0BAAP,MAAuC,kDAAvC;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,sBAAP,MAAmC,8CAAnC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,SAASC,GAAG,IAAIC,aAAhB,QAAqC,eAArC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,0BAAT,QAA2C,wCAA3C;AACA,SAASC,0BAAT,QAA2C,wBAA3C;AACA,SAASC,wBAAT,QAAyC,0BAAzC;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA;;AAEA;;AAEA,IAAIC,wCAAwC,GAC5C,aACA,UAAUC,UAAV,EAAsB;AACpBb,EAAAA,SAAS,CAACY,wCAAD,EAA2CC,UAA3C,CAAT;;AAEA,WAASD,wCAAT,CAAkDE,KAAlD,EAAyD;AACvD,QAAIC,KAAJ;;AAEApB,IAAAA,eAAe,CAAC,IAAD,EAAOiB,wCAAP,CAAf;;AAEAG,IAAAA,KAAK,GAAGlB,0BAA0B,CAAC,IAAD,EAAOC,eAAe,CAACc,wCAAD,CAAf,CAA0DI,IAA1D,CAA+D,IAA/D,EAAqEF,KAArE,CAAP,CAAlC;;AAEAb,IAAAA,eAAe,CAACF,sBAAsB,CAACgB,KAAD,CAAvB,EAAgC,OAAhC,EAAyC;AACtDE,MAAAA,cAAc,EAAE,KADsC;AAEtDC,MAAAA,YAAY,EAAE;AAFwC,KAAzC,CAAf;;AAKAjB,IAAAA,eAAe,CAACF,sBAAsB,CAACgB,KAAD,CAAvB,EAAgC,eAAhC,EAAiD,YAAY;AAC1EA,MAAAA,KAAK,CAACI,QAAN,CAAe;AACbF,QAAAA,cAAc,EAAE;AADH,OAAf;AAGD,KAJc,CAAf;;AAMAhB,IAAAA,eAAe,CAACF,sBAAsB,CAACgB,KAAD,CAAvB,EAAgC,gBAAhC,EAAkD,YAAY;AAC3E,UAAIK,iBAAiB,GAAGL,KAAK,CAACD,KAAN,CAAYO,iBAApC;AACA,aAAOlB,aAAa,CAACiB,iBAAD,EAAoB;AACtCE,QAAAA,IAAI,EAAEP,KAAK,CAACD,KAAN,CAAYS;AADoB,OAApB,CAApB;AAGD,KALc,CAAf;;AAOAtB,IAAAA,eAAe,CAACF,sBAAsB,CAACgB,KAAD,CAAvB,EAAgC,2BAAhC,EAA6D,YAAY;AACtF,UAAIS,WAAW,GAAGT,KAAK,CAACD,KAAxB;AAAA,UACIS,qBAAqB,GAAGC,WAAW,CAACD,qBADxC;AAAA,UAEIE,IAAI,GAAGD,WAAW,CAACC,IAFvB;AAGA,UAAIP,YAAY,GAAGH,KAAK,CAACW,KAAN,CAAYR,YAA/B;;AAEA,UAAIO,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAc,WAA1B,EAAuC;AACrC,eAAOP,KAAK,CAACY,UAAN,CAAiBF,IAAjB,CAAP;AACD;;AAED,UAAIP,YAAY,IAAIA,YAAY,CAACI,IAAb,KAAsB,WAA1C,EAAuD;AACrD,eAAOP,KAAK,CAACY,UAAN,CAAiBT,YAAjB,CAAP;AACD;;AAED,UAAI,CAACO,IAAD,IAASF,qBAAqB,KAAK,WAAnC,IAAkD,CAACR,KAAK,CAACW,KAAN,CAAYT,cAAnE,EAAmF;AACjF,eAAOF,KAAK,CAACa,cAAN,EAAP;AACD;;AAED,aAAOL,qBAAqB,KAAK,WAA1B,GAAwC,IAAxC,GAA+CR,KAAK,CAACa,cAAN,EAAtD;AACD,KAnBc,CAAf;;AAqBA3B,IAAAA,eAAe,CAACF,sBAAsB,CAACgB,KAAD,CAAvB,EAAgC,wBAAhC,EAA0D,YAAY;AACnF,UAAIc,YAAY,GAAGd,KAAK,CAACD,KAAzB;AAAA,UACIgB,gBAAgB,GAAGD,YAAY,CAACE,gBADpC;AAAA,UAEIN,IAAI,GAAGI,YAAY,CAACJ,IAFxB;AAGA,UAAIR,cAAc,GAAGF,KAAK,CAACW,KAAN,CAAYT,cAAjC;AACA;;;;;AAKA,aAAOd,aAAa,CAACG,QAAD,EAAW,IAAX,EAAiBH,aAAa,CAAC2B,gBAAD,EAAmB,IAAnB,CAA9B,EAAwD3B,aAAa,CAACQ,gBAAD,EAAmB;AAC1GqB,QAAAA,UAAU,EAAEP,IAD8F;AAE1GQ,QAAAA,WAAW,EAAEhB,cAF6F;AAG1GiB,QAAAA,aAAa,EAAEnB,KAAK,CAACmB;AAHqF,OAAnB,CAArE,CAApB;AAKD,KAfc,CAAf;;AAiBAjC,IAAAA,eAAe,CAACF,sBAAsB,CAACgB,KAAD,CAAvB,EAAgC,yBAAhC,EAA2D,YAAY;AACpF,UAAIU,IAAI,GAAGV,KAAK,CAACD,KAAN,CAAYW,IAAvB;AACA,UAAIP,YAAY,GAAGH,KAAK,CAACW,KAAN,CAAYR,YAA/B;;AAEA,UAAIO,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAc,SAA1B,EAAqC;AACnC,eAAOP,KAAK,CAACY,UAAN,CAAiBF,IAAjB,CAAP;AACD,OANmF,CAMlF;AACF;;;AAGA,UAAIA,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAc,WAAtB,IAAqCJ,YAArC,IAAqDA,YAAY,CAACI,IAAb,KAAsB,SAA/E,EAA0F;AACxF,eAAOP,KAAK,CAACY,UAAN,CAAiBT,YAAjB,CAAP;AACD;;AAED,aAAOH,KAAK,CAACa,cAAN,EAAP;AACD,KAfc,CAAf;;AAiBAb,IAAAA,KAAK,CAACoB,yBAAN,CAAgCC,WAAhC,GAA8C,6BAA9C;AACArB,IAAAA,KAAK,CAACsB,uBAAN,CAA8BD,WAA9B,GAA4C,2BAA5C;AACA,WAAOrB,KAAP;AACD;;AAEDnB,EAAAA,YAAY,CAACgB,wCAAD,EAA2C,CAAC;AACtD0B,IAAAA,GAAG,EAAE,oBADiD;AAEtDC,IAAAA,KAAK,EAAE,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AAC5C,UAAIhB,IAAI,GAAG,KAAKX,KAAL,CAAWW,IAAtB;AACA,UAAIiB,QAAQ,GAAGD,SAAS,CAAChB,IAAzB;;AAEA,UAAI,CAACA,IAAD,IAAS,CAACiB,QAAd,EAAwB;AACtB;AACD,OAN2C,CAM1C;AACF;;;AAGA,UAAIjB,IAAI,CAACH,IAAL,KAAcoB,QAAQ,CAACpB,IAA3B,EAAiC;AAC/B;AACA;AACA;AACA;AACA,aAAKH,QAAL,CAAc;AACZD,UAAAA,YAAY,EAAEwB;AADF,SAAd;AAGD;AACF;AArBqD,GAAD,EAsBpD;AACDJ,IAAAA,GAAG,EAAE,YADJ;AAEDC,IAAAA,KAAK,EAAE,SAASZ,UAAT,CAAoBF,IAApB,EAA0B;AAC/B,UAAIkB,YAAY,GAAG,KAAK7B,KAAxB;AAAA,UACI8B,gBAAgB,GAAGD,YAAY,CAACC,gBADpC;AAAA,UAEIC,aAAa,GAAGF,YAAY,CAACG,aAFjC;AAGA,aAAO3C,aAAa,CAAC0C,aAAD,EAAgB;AAClCD,QAAAA,gBAAgB,EAAEA,gBADgB;AAElCG,QAAAA,KAAK,EAAEtB,IAAI,CAACuB;AAFsB,OAAhB,CAApB;AAID;AAVA,GAtBoD,EAiCpD;AACDV,IAAAA,GAAG,EAAE,QADJ;AAEDC,IAAAA,KAAK,EAAE,SAASU,MAAT,GAAkB;AACvB,UAAIC,YAAY,GAAG,KAAKpC,KAAxB;AAAA,UACIqC,QAAQ,GAAGD,YAAY,CAACC,QAD5B;AAAA,UAEIC,QAAQ,GAAGF,YAAY,CAACE,QAF5B;AAAA,UAGIC,qCAAqC,GAAGH,YAAY,CAACG,qCAHzD;AAAA,UAIIC,0BAA0B,GAAGJ,YAAY,CAACI,0BAJ9C;AAAA,UAKIC,4BAA4B,GAAGL,YAAY,CAACK,4BALhD;AAAA,UAMIC,sCAAsC,GAAGN,YAAY,CAACM,sCAN1D;AAAA,UAOIC,gCAAgC,GAAGP,YAAY,CAACO,gCAPpD;AAAA,UAQIlC,qBAAqB,GAAG2B,YAAY,CAAC3B,qBARzC;AAAA,UASImC,aAAa,GAAGR,YAAY,CAACQ,aATjC;AAAA,UAUIC,WAAW,GAAGT,YAAY,CAACS,WAV/B;AAAA,UAWIC,eAAe,GAAGV,YAAY,CAACU,eAXnC;AAAA,UAYIC,aAAa,GAAGX,YAAY,CAACW,aAZjC;AAAA,UAaIC,OAAO,GAAGZ,YAAY,CAACY,OAb3B;AAAA,UAcIrC,IAAI,GAAGyB,YAAY,CAACzB,IAdxB;AAAA,UAeIsC,SAAS,GAAGb,YAAY,CAACa,SAf7B;AAAA,UAgBIC,yBAAyB,GAAGd,YAAY,CAACc,yBAhB7C;AAAA,UAiBIC,wBAAwB,GAAGf,YAAY,CAACe,wBAjB5C;AAkBA,aAAO9D,aAAa,CAACI,0BAAD,EAA6B;AAC/CyC,QAAAA,IAAI,EAAE;AACJkB,UAAAA,UAAU,EAAExE,aAAa,CAAC;AACxByE,YAAAA,eAAe,EAAE1C,IAAI,IAAIA,IAAI,CAACH,IADN;AAExBG,YAAAA,IAAI,EAAEA,IAAI,IAAIA,IAAI,CAAC2C;AAFK,WAAD,EAGtB3C,IAAI,IAAIA,IAAI,CAAC4C,mBAHS;AADrB;AADyC,OAA7B,EAOjBlE,aAAa,CAACO,aAAD,EAAgB;AAC9BqB,QAAAA,gBAAgB,EAAE,KAAKuC,sBADO;AAE9BC,QAAAA,mBAAmB,EAAE9C,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAc,WAAtB,IAAqC,CAACG,IAAD,IAASF,qBAAqB,KAAK,WAAnC,IAAkD,CAAC,KAAKG,KAAL,CAAWT,cAAnG,GAAoH,KAAKkB,yBAAzH,GAAqJ,IAF5I;AAG9BkB,QAAAA,qCAAqC,EAAEA,qCAHT;AAI9BC,QAAAA,0BAA0B,EAAEA,0BAJE;AAK9BC,QAAAA,4BAA4B,EAAEA,4BALA;AAM9BC,QAAAA,sCAAsC,EAAEA,sCANV;AAO9BC,QAAAA,gCAAgC,EAAEA,gCAPJ;AAQ9Be,QAAAA,iBAAiB,EAAE,KAAKnC,uBARM;AAS9BqB,QAAAA,aAAa,EAAEA,aATe;AAU9BC,QAAAA,WAAW,EAAEA,WAViB;AAW9BC,QAAAA,eAAe,EAAEA,eAXa;AAY9BC,QAAAA,aAAa,EAAEA,aAZe;AAa9BC,QAAAA,OAAO,EAAEA,OAbqB;AAc9BC,QAAAA,SAAS,EAAEA,SAdmB;AAe9BC,QAAAA,yBAAyB,EAAEA,yBAfG;AAgB9BC,QAAAA,wBAAwB,EAAEA,wBAhBI;AAiB9Bb,QAAAA,QAAQ,EAAEA,QAjBoB;AAkB9B3B,QAAAA,IAAI,EAAEA;AAlBwB,OAAhB,EAmBb0B,QAnBa,CAPI,CAApB;AA2BD;AAhDA,GAjCoD,CAA3C,CAAZ;;AAoFA,SAAOvC,wCAAP;AACD,CA7KD,CA6KEP,SA7KF,CAFA;;AAiLAJ,eAAe,CAACW,wCAAD,EAA2C,cAA3C,EAA2D;AACxEyC,EAAAA,qCAAqC,EAAE,KADiC;AAExEC,EAAAA,0BAA0B,EAAE,KAF4C;AAGxEC,EAAAA,4BAA4B,EAAE,KAH0C;AAIxEC,EAAAA,sCAAsC,EAAE,KAJgC;AAKxEC,EAAAA,gCAAgC,EAAE;AALsC,CAA3D,CAAf;;AAQA,IAAIgB,0BAA0B,GAAG,SAASA,0BAAT,EAAqC;AACtE3D,KADiC,EAC1B;AACL,SAAOX,aAAa,CAACM,wBAAD,EAA2B,IAA3B,EAAiC,UAAUiE,IAAV,EAAgB;AACnE,QAAI1C,UAAU,GAAG0C,IAAI,CAAChD,KAAL,CAAWM,UAA5B;AACA,WAAO7B,aAAa,CAACS,wCAAD,EAA2CnB,QAAQ,CAAC;AACtEgC,MAAAA,IAAI,EAAEO;AADgE,KAAD,EAEpElB,KAFoE,CAAnD,CAApB;AAGD,GALmB,CAApB;AAMD,CARD;;AAUA,eAAeN,0BAA0B,CAACiE,0BAAD,CAAzC","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React, { Component, Fragment } from 'react';\nimport { NavigationAnalyticsContext } from '@atlaskit/analytics-namespaced-context';\nimport { withNavigationUIController } from '../../../ui-controller';\nimport { ViewControllerSubscriber } from '../../../view-controller';\nimport LayoutManager from '../../presentational/LayoutManager';\nimport LayerInitialised from '../../presentational/LayerInitialised';\n/* NOTE: experimental props use an underscore */\n\n/* eslint-disable camelcase */\n\nvar AsyncLayoutManagerWithViewControllerBase =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AsyncLayoutManagerWithViewControllerBase, _Component);\n\n  function AsyncLayoutManagerWithViewControllerBase(props) {\n    var _this;\n\n    _classCallCheck(this, AsyncLayoutManagerWithViewControllerBase);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncLayoutManagerWithViewControllerBase).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      hasInitialised: false,\n      outgoingView: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInitialised\", function () {\n      _this.setState({\n        hasInitialised: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSkeleton\", function () {\n      var ContainerSkeleton = _this.props.containerSkeleton;\n      return ___EmotionJSX(ContainerSkeleton, {\n        type: _this.props.firstSkeletonToRender\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderContainerNavigation\", function () {\n      var _this$props = _this.props,\n          firstSkeletonToRender = _this$props.firstSkeletonToRender,\n          view = _this$props.view;\n      var outgoingView = _this.state.outgoingView;\n\n      if (view && view.type === 'container') {\n        return _this.renderView(view);\n      }\n\n      if (outgoingView && outgoingView.type === 'container') {\n        return _this.renderView(outgoingView);\n      }\n\n      if (!view && firstSkeletonToRender === 'container' && !_this.state.hasInitialised) {\n        return _this.renderSkeleton();\n      }\n\n      return firstSkeletonToRender !== 'container' ? null : _this.renderSkeleton();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderGlobalNavigation\", function () {\n      var _this$props2 = _this.props,\n          GlobalNavigation = _this$props2.globalNavigation,\n          view = _this$props2.view;\n      var hasInitialised = _this.state.hasInitialised;\n      /* We are embedding the LayerInitialised analytics component within global navigation so that\n       * the event it fires can access the analytics context within LayerManager. The component\n       * cannot be rendered directly within LayerManager since it needs access to view data which\n       * only exists in LayoutManagerWithViewController. */\n\n      return ___EmotionJSX(Fragment, null, ___EmotionJSX(GlobalNavigation, null), ___EmotionJSX(LayerInitialised, {\n        activeView: view,\n        initialised: hasInitialised,\n        onInitialised: _this.onInitialised\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderProductNavigation\", function () {\n      var view = _this.props.view;\n      var outgoingView = _this.state.outgoingView;\n\n      if (view && view.type === 'product') {\n        return _this.renderView(view);\n      } // If we're transitioning from a product view to a container view still\n      // render the outgoing product view.\n\n\n      if (view && view.type === 'container' && outgoingView && outgoingView.type === 'product') {\n        return _this.renderView(outgoingView);\n      }\n\n      return _this.renderSkeleton();\n    });\n\n    _this.renderContainerNavigation.displayName = 'ContainerNavigationRenderer';\n    _this.renderProductNavigation.displayName = 'ProductNavigationRenderer';\n    return _this;\n  }\n\n  _createClass(AsyncLayoutManagerWithViewControllerBase, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var view = this.props.view;\n      var prevView = prevProps.view;\n\n      if (!view || !prevView) {\n        return;\n      } // If we're moving from a product to a container view or vice versa we cache\n      // the previous view so that we can still render it during the transition.\n\n\n      if (view.type !== prevView.type) {\n        // It's totally fine to setState in componentDidUpdate as long as it's\n        // wrapped in a condition:\n        // https://reactjs.org/docs/react-component.html#componentdidupdate\n        // eslint-disable-next-line\n        this.setState({\n          outgoingView: prevView\n        });\n      }\n    }\n  }, {\n    key: \"renderView\",\n    value: function renderView(view) {\n      var _this$props3 = this.props,\n          customComponents = _this$props3.customComponents,\n          ItemsRenderer = _this$props3.itemsRenderer;\n      return ___EmotionJSX(ItemsRenderer, {\n        customComponents: customComponents,\n        items: view.data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          datasets = _this$props4.datasets,\n          experimental_alternateFlyoutBehaviour = _this$props4.experimental_alternateFlyoutBehaviour,\n          experimental_flyoutOnHover = _this$props4.experimental_flyoutOnHover,\n          experimental_fullWidthFlyout = _this$props4.experimental_fullWidthFlyout,\n          experimental_hideNavVisuallyOnCollapse = _this$props4.experimental_hideNavVisuallyOnCollapse,\n          experimental_horizontalGlobalNav = _this$props4.experimental_horizontalGlobalNav,\n          firstSkeletonToRender = _this$props4.firstSkeletonToRender,\n          onExpandStart = _this$props4.onExpandStart,\n          onExpandEnd = _this$props4.onExpandEnd,\n          onCollapseStart = _this$props4.onCollapseStart,\n          onCollapseEnd = _this$props4.onCollapseEnd,\n          getRefs = _this$props4.getRefs,\n          view = _this$props4.view,\n          topOffset = _this$props4.topOffset,\n          shouldHideGlobalNavShadow = _this$props4.shouldHideGlobalNavShadow,\n          showContextualNavigation = _this$props4.showContextualNavigation;\n      return ___EmotionJSX(NavigationAnalyticsContext, {\n        data: {\n          attributes: _objectSpread({\n            navigationLayer: view && view.type,\n            view: view && view.id\n          }, view && view.analyticsAttributes)\n        }\n      }, ___EmotionJSX(LayoutManager, {\n        globalNavigation: this.renderGlobalNavigation,\n        containerNavigation: view && view.type === 'container' || !view && firstSkeletonToRender === 'container' && !this.state.hasInitialised ? this.renderContainerNavigation : null,\n        experimental_alternateFlyoutBehaviour: experimental_alternateFlyoutBehaviour,\n        experimental_flyoutOnHover: experimental_flyoutOnHover,\n        experimental_fullWidthFlyout: experimental_fullWidthFlyout,\n        experimental_hideNavVisuallyOnCollapse: experimental_hideNavVisuallyOnCollapse,\n        experimental_horizontalGlobalNav: experimental_horizontalGlobalNav,\n        productNavigation: this.renderProductNavigation,\n        onExpandStart: onExpandStart,\n        onExpandEnd: onExpandEnd,\n        onCollapseStart: onCollapseStart,\n        onCollapseEnd: onCollapseEnd,\n        getRefs: getRefs,\n        topOffset: topOffset,\n        shouldHideGlobalNavShadow: shouldHideGlobalNavShadow,\n        showContextualNavigation: showContextualNavigation,\n        datasets: datasets,\n        view: view\n      }, children));\n    }\n  }]);\n\n  return AsyncLayoutManagerWithViewControllerBase;\n}(Component);\n\n_defineProperty(AsyncLayoutManagerWithViewControllerBase, \"defaultProps\", {\n  experimental_alternateFlyoutBehaviour: false,\n  experimental_flyoutOnHover: false,\n  experimental_fullWidthFlyout: false,\n  experimental_hideNavVisuallyOnCollapse: false,\n  experimental_horizontalGlobalNav: false\n});\n\nvar AsyncLayoutManagerWithView = function AsyncLayoutManagerWithView( // eslint-disable-next-line no-undef\nprops) {\n  return ___EmotionJSX(ViewControllerSubscriber, null, function (_ref) {\n    var activeView = _ref.state.activeView;\n    return ___EmotionJSX(AsyncLayoutManagerWithViewControllerBase, _extends({\n      view: activeView\n    }, props));\n  });\n};\n\nexport default withNavigationUIController(AsyncLayoutManagerWithView);"]},"metadata":{},"sourceType":"module"}