{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport React, { Component } from 'react';\nimport { withAnalyticsEvents, withAnalyticsContext, createAndFireEvent } from '@atlaskit/analytics-next';\nimport Tooltip from '@atlaskit/tooltip';\nimport { name as packageName, version as packageVersion } from '../version.json';\nimport { propsOmittedFromClickData } from './constants';\nimport Presence from './Presence';\nimport AvatarImage from './AvatarImage';\nimport Status from './Status';\nimport Outer, { PresenceWrapper, StatusWrapper } from '../styled/Avatar';\nimport { omit } from '../utils';\nimport { getProps, getStyledAvatar } from '../helpers';\nimport { mapProps, withPseudoState } from '../hoc';\nimport { Theme } from '../theme';\nimport { ICON_SIZES } from '../styled/constants';\nvar validIconSizes = Object.keys(ICON_SIZES);\n\nvar warn = function warn(message) {\n  if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n    console.warn(message); // eslint-disable-line no-console\n  }\n};\n\nvar Avatar =\n/** @class */\nfunction (_super) {\n  __extends(Avatar, _super);\n\n  function Avatar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');\n\n    _this.clickAnalyticsCaller = function () {\n      var createAnalyticsEvent = _this.props.createAnalyticsEvent;\n      return createAnalyticsEvent ? _this.createAndFireEventOnAtlaskit({\n        action: 'clicked',\n        actionSubject: 'avatar',\n        attributes: {\n          componentName: 'avatar',\n          packageName: packageName,\n          packageVersion: packageVersion\n        }\n      })(createAnalyticsEvent) : undefined;\n    }; // expose blur/focus to consumers via ref\n\n\n    _this.blur = function () {\n      if (_this.ref) _this.ref.blur();\n    };\n\n    _this.focus = function () {\n      if (_this.ref) _this.ref.focus();\n    }; // disallow click on disabled avatars\n    // only return avatar data properties\n\n\n    _this.guardedClick = function (event) {\n      var _a = _this.props,\n          isDisabled = _a.isDisabled,\n          onClick = _a.onClick;\n      if (isDisabled || typeof onClick !== 'function') return;\n      var item = omit.apply(void 0, __spread([_this.props], propsOmittedFromClickData));\n\n      var analyticsEvent = _this.clickAnalyticsCaller();\n\n      onClick({\n        item: item,\n        event: event\n      }, analyticsEvent);\n    }; // enforce status / presence rules\n\n    /* eslint-disable no-console */\n\n\n    _this.renderIcon = function () {\n      var _a = _this.props,\n          appearance = _a.appearance,\n          borderColor = _a.borderColor,\n          presence = _a.presence,\n          status = _a.status;\n      var showPresence = Boolean(presence);\n      var showStatus = Boolean(status); // no icon needed\n\n      if (!showStatus && !showPresence) {\n        return null;\n      }\n\n      if (showStatus && showPresence) {\n        warn('Avatar supports `presence` OR `status` properties, not both.');\n        return null;\n      } // only support particular sizes\n\n\n      if (validIconSizes.indexOf(_this.props.size) === -1) {\n        warn(\"Avatar size \\\"\" + String(_this.props.size) + \"\\\" does NOT support \" + (showPresence ? 'presence' : 'status'));\n        return null;\n      } // we can cast here because we already know that it is a valid icon size\n\n\n      var size = _this.props.size;\n\n      var indicator = function () {\n        if (showPresence) {\n          var customPresenceNode = typeof presence === 'object' ? presence : null;\n          return React.createElement(PresenceWrapper, {\n            appearance: appearance,\n            size: size\n          }, React.createElement(Presence, {\n            borderColor: borderColor,\n            presence: !customPresenceNode && presence,\n            size: size\n          }, customPresenceNode));\n        } // showStatus\n\n\n        var customStatusNode = typeof status === 'object' ? status : null;\n        return React.createElement(StatusWrapper, {\n          appearance: appearance,\n          size: size\n        }, React.createElement(Status, {\n          borderColor: borderColor,\n          status: !customStatusNode && status,\n          size: size\n        }, customStatusNode));\n      }();\n\n      return indicator;\n    };\n\n    _this.setRef = function (ref) {\n      _this.ref = ref;\n    };\n\n    return _this;\n  }\n\n  Avatar.prototype.render = function () {\n    var _a = this.props,\n        appearance = _a.appearance,\n        enableTooltip = _a.enableTooltip,\n        name = _a.name,\n        size = _a.size,\n        src = _a.src,\n        stackIndex = _a.stackIndex,\n        onClick = _a.onClick,\n        theme = _a.theme,\n        testId = _a.testId; // distill props from context, props, and state\n\n    var enhancedProps = getProps(this); // provide element interface based on props\n\n    var Inner = getStyledAvatar(this.props);\n    Inner.displayName = 'Inner';\n    var AvatarNode = React.createElement(Theme.Provider, {\n      value: theme\n    }, React.createElement(Outer, {\n      size: size,\n      stackIndex: stackIndex,\n      testId: testId\n    }, React.createElement(Inner, __assign({\n      innerRef: this.setRef\n    }, enhancedProps, {\n      onClick: onClick != null ? this.guardedClick : undefined\n    }), React.createElement(AvatarImage, {\n      alt: name,\n      appearance: appearance,\n      size: size,\n      src: src\n    })), this.renderIcon()));\n    return enableTooltip && name ? React.createElement(Tooltip, {\n      content: name\n    }, AvatarNode) : AvatarNode;\n  };\n\n  Avatar.defaultProps = {\n    appearance: 'circle',\n    enableTooltip: true,\n    size: 'medium'\n  };\n  return Avatar;\n}(Component);\n\nexport var AvatarWithoutAnalytics = mapProps({\n  appearance: function appearance(props) {\n    return props.appearance || Avatar.defaultProps.appearance;\n  },\n  isInteractive: function isInteractive(props) {\n    return Boolean((typeof props.enableTooltip !== 'undefined' ? props.enableTooltip : Avatar.defaultProps.enableTooltip) && props.name);\n  }\n})(withPseudoState(Avatar));\nexport default withAnalyticsContext({\n  componentName: 'avatar',\n  packageName: packageName,\n  packageVersion: packageVersion\n})(withAnalyticsEvents()(AvatarWithoutAnalytics));","map":{"version":3,"sources":["../../../src/components/Avatar.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __read, __spread } from \"tslib\";\nimport React, { Component } from 'react';\nimport { withAnalyticsEvents, withAnalyticsContext, createAndFireEvent, } from '@atlaskit/analytics-next';\nimport Tooltip from '@atlaskit/tooltip';\nimport { name as packageName, version as packageVersion, } from '../version.json';\nimport { propsOmittedFromClickData } from './constants';\nimport Presence from './Presence';\nimport AvatarImage from './AvatarImage';\nimport Status from './Status';\nimport Outer, { PresenceWrapper, StatusWrapper } from '../styled/Avatar';\nimport { omit } from '../utils';\nimport { getProps, getStyledAvatar } from '../helpers';\nimport { mapProps, withPseudoState } from '../hoc';\nimport { Theme } from '../theme';\nimport { ICON_SIZES } from '../styled/constants';\nvar validIconSizes = Object.keys(ICON_SIZES);\nvar warn = function (message) {\n    if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n        console.warn(message); // eslint-disable-line no-console\n    }\n};\nvar Avatar = /** @class */ (function (_super) {\n    __extends(Avatar, _super);\n    function Avatar() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');\n        _this.clickAnalyticsCaller = function () {\n            var createAnalyticsEvent = _this.props.createAnalyticsEvent;\n            return createAnalyticsEvent\n                ? _this.createAndFireEventOnAtlaskit({\n                    action: 'clicked',\n                    actionSubject: 'avatar',\n                    attributes: {\n                        componentName: 'avatar',\n                        packageName: packageName,\n                        packageVersion: packageVersion,\n                    },\n                })(createAnalyticsEvent)\n                : undefined;\n        };\n        // expose blur/focus to consumers via ref\n        _this.blur = function () {\n            if (_this.ref)\n                _this.ref.blur();\n        };\n        _this.focus = function () {\n            if (_this.ref)\n                _this.ref.focus();\n        };\n        // disallow click on disabled avatars\n        // only return avatar data properties\n        _this.guardedClick = function (event) {\n            var _a = _this.props, isDisabled = _a.isDisabled, onClick = _a.onClick;\n            if (isDisabled || typeof onClick !== 'function')\n                return;\n            var item = omit.apply(void 0, __spread([_this.props], propsOmittedFromClickData));\n            var analyticsEvent = _this.clickAnalyticsCaller();\n            onClick({ item: item, event: event }, analyticsEvent);\n        };\n        // enforce status / presence rules\n        /* eslint-disable no-console */\n        _this.renderIcon = function () {\n            var _a = _this.props, appearance = _a.appearance, borderColor = _a.borderColor, presence = _a.presence, status = _a.status;\n            var showPresence = Boolean(presence);\n            var showStatus = Boolean(status);\n            // no icon needed\n            if (!showStatus && !showPresence) {\n                return null;\n            }\n            if (showStatus && showPresence) {\n                warn('Avatar supports `presence` OR `status` properties, not both.');\n                return null;\n            }\n            // only support particular sizes\n            if (validIconSizes.indexOf(_this.props.size) === -1) {\n                warn(\"Avatar size \\\"\" + String(_this.props.size) + \"\\\" does NOT support \" + (showPresence ? 'presence' : 'status'));\n                return null;\n            }\n            // we can cast here because we already know that it is a valid icon size\n            var size = _this.props.size;\n            var indicator = (function () {\n                if (showPresence) {\n                    var customPresenceNode = typeof presence === 'object' ? presence : null;\n                    return (React.createElement(PresenceWrapper, { appearance: appearance, size: size },\n                        React.createElement(Presence, { borderColor: borderColor, presence: !customPresenceNode && presence, size: size }, customPresenceNode)));\n                }\n                // showStatus\n                var customStatusNode = typeof status === 'object' ? status : null;\n                return (React.createElement(StatusWrapper, { appearance: appearance, size: size },\n                    React.createElement(Status, { borderColor: borderColor, status: !customStatusNode && status, size: size }, customStatusNode)));\n            })();\n            return indicator;\n        };\n        _this.setRef = function (ref) {\n            _this.ref = ref;\n        };\n        return _this;\n    }\n    Avatar.prototype.render = function () {\n        var _a = this.props, appearance = _a.appearance, enableTooltip = _a.enableTooltip, name = _a.name, size = _a.size, src = _a.src, stackIndex = _a.stackIndex, onClick = _a.onClick, theme = _a.theme, testId = _a.testId;\n        // distill props from context, props, and state\n        var enhancedProps = getProps(this);\n        // provide element interface based on props\n        var Inner = getStyledAvatar(this.props);\n        Inner.displayName = 'Inner';\n        var AvatarNode = (React.createElement(Theme.Provider, { value: theme },\n            React.createElement(Outer, { size: size, stackIndex: stackIndex, testId: testId },\n                React.createElement(Inner, __assign({ innerRef: this.setRef }, enhancedProps, { onClick: onClick != null ? this.guardedClick : undefined }),\n                    React.createElement(AvatarImage, { alt: name, appearance: appearance, size: size, src: src })),\n                this.renderIcon())));\n        return enableTooltip && name ? (React.createElement(Tooltip, { content: name }, AvatarNode)) : (AvatarNode);\n    };\n    Avatar.defaultProps = {\n        appearance: 'circle',\n        enableTooltip: true,\n        size: 'medium',\n    };\n    return Avatar;\n}(Component));\nexport var AvatarWithoutAnalytics = mapProps({\n    appearance: function (props) { return props.appearance || Avatar.defaultProps.appearance; },\n    isInteractive: function (props) {\n        return Boolean((typeof props.enableTooltip !== 'undefined'\n            ? props.enableTooltip\n            : Avatar.defaultProps.enableTooltip) && props.name);\n    },\n})(withPseudoState(Avatar));\nexport default withAnalyticsContext({\n    componentName: 'avatar',\n    packageName: packageName,\n    packageVersion: packageVersion,\n})(withAnalyticsEvents()(AvatarWithoutAnalytics));\n//# sourceMappingURL=Avatar.js.map"]},"metadata":{},"sourceType":"module"}