{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport GlobalTheme from '@atlaskit/theme/components';\nimport React, { cloneElement, Component } from 'react';\nimport { propsOmittedFromClickData } from './constants';\nimport { omit } from '../utils';\nimport { getBackgroundColor, Content, PrimaryText, SecondaryText } from '../styled/AvatarItem';\nimport { getProps, getStyledAvatarItem } from '../helpers';\nimport { withPseudoState } from '../hoc';\nimport { ThemeItem } from '../theme/item';\n\nvar AvatarItem =\n/** @class */\nfunction (_super) {\n  __extends(AvatarItem, _super);\n\n  function AvatarItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // expose blur/focus to consumers via ref\n\n\n    _this.blur = function () {\n      if (_this.node) _this.node.blur();\n    };\n\n    _this.focus = function () {\n      if (_this.node) _this.node.focus();\n    }; // disallow click on disabled avatars\n\n\n    _this.guardedClick = function (event) {\n      var _a = _this.props,\n          isDisabled = _a.isDisabled,\n          onClick = _a.onClick;\n      if (isDisabled || typeof onClick !== 'function') return;\n      var item = omit.apply(void 0, __spread([_this.props], propsOmittedFromClickData));\n      onClick({\n        item: item,\n        event: event\n      });\n    };\n\n    _this.setNode = function (ref) {\n      _this.node = ref;\n    };\n\n    return _this;\n  }\n\n  AvatarItem.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        avatar = _a.avatar,\n        enableTextTruncate = _a.enableTextTruncate,\n        primaryText = _a.primaryText,\n        secondaryText = _a.secondaryText,\n        href = _a.href,\n        onClick = _a.onClick; // distill props from context, props, and state\n\n    var enhancedProps = getProps(this); // provide element interface based on props\n\n    var StyledComponent = getStyledAvatarItem(this.props);\n    return React.createElement(GlobalTheme.Consumer, null, function (_a) {\n      var mode = _a.mode;\n      return React.createElement(ThemeItem.Provider, {\n        value: _this.props.theme\n      }, React.createElement(ThemeItem.Consumer, null, function (tokens) {\n        // maintain the illusion of a mask around presence/status\n        var borderColor = getBackgroundColor(__assign(__assign(__assign({}, _this.props), tokens), {\n          mode: mode\n        }));\n        return React.createElement(StyledComponent, __assign({\n          innerRef: _this.setNode\n        }, enhancedProps, {\n          isInteractive: !!href || !!onClick,\n          onClick: _this.guardedClick\n        }), React.isValidElement(avatar) ? cloneElement(avatar, {\n          borderColor: borderColor\n        }) : null, React.createElement(Content, {\n          truncate: enableTextTruncate\n        }, React.createElement(PrimaryText, {\n          truncate: enableTextTruncate\n        }, primaryText), React.createElement(SecondaryText, {\n          truncate: enableTextTruncate\n        }, secondaryText)));\n      }));\n    });\n  };\n\n  AvatarItem.defaultProps = {\n    enableTextTruncate: true\n  };\n  return AvatarItem;\n}(Component);\n\nexport default withPseudoState(AvatarItem);","map":{"version":3,"sources":["../../../src/components/AvatarItem.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __read, __spread } from \"tslib\";\nimport GlobalTheme from '@atlaskit/theme/components';\nimport React, { cloneElement, Component, } from 'react';\nimport { propsOmittedFromClickData } from './constants';\nimport { omit } from '../utils';\nimport { getBackgroundColor, Content, PrimaryText, SecondaryText, } from '../styled/AvatarItem';\nimport { getProps, getStyledAvatarItem } from '../helpers';\nimport { withPseudoState } from '../hoc';\nimport { ThemeItem } from '../theme/item';\nvar AvatarItem = /** @class */ (function (_super) {\n    __extends(AvatarItem, _super);\n    function AvatarItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // expose blur/focus to consumers via ref\n        _this.blur = function () {\n            if (_this.node)\n                _this.node.blur();\n        };\n        _this.focus = function () {\n            if (_this.node)\n                _this.node.focus();\n        };\n        // disallow click on disabled avatars\n        _this.guardedClick = function (event) {\n            var _a = _this.props, isDisabled = _a.isDisabled, onClick = _a.onClick;\n            if (isDisabled || typeof onClick !== 'function')\n                return;\n            var item = omit.apply(void 0, __spread([_this.props], propsOmittedFromClickData));\n            onClick({ item: item, event: event });\n        };\n        _this.setNode = function (ref) {\n            _this.node = ref;\n        };\n        return _this;\n    }\n    AvatarItem.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, avatar = _a.avatar, enableTextTruncate = _a.enableTextTruncate, primaryText = _a.primaryText, secondaryText = _a.secondaryText, href = _a.href, onClick = _a.onClick;\n        // distill props from context, props, and state\n        var enhancedProps = getProps(this);\n        // provide element interface based on props\n        var StyledComponent = getStyledAvatarItem(this.props);\n        return (React.createElement(GlobalTheme.Consumer, null, function (_a) {\n            var mode = _a.mode;\n            return (React.createElement(ThemeItem.Provider, { value: _this.props.theme },\n                React.createElement(ThemeItem.Consumer, null, function (tokens) {\n                    // maintain the illusion of a mask around presence/status\n                    var borderColor = getBackgroundColor(__assign(__assign(__assign({}, _this.props), tokens), { mode: mode }));\n                    return (React.createElement(StyledComponent, __assign({ innerRef: _this.setNode }, enhancedProps, { isInteractive: !!href || !!onClick, onClick: _this.guardedClick }),\n                        React.isValidElement(avatar)\n                            ? cloneElement(avatar, { borderColor: borderColor })\n                            : null,\n                        React.createElement(Content, { truncate: enableTextTruncate },\n                            React.createElement(PrimaryText, { truncate: enableTextTruncate }, primaryText),\n                            React.createElement(SecondaryText, { truncate: enableTextTruncate }, secondaryText))));\n                })));\n        }));\n    };\n    AvatarItem.defaultProps = {\n        enableTextTruncate: true,\n    };\n    return AvatarItem;\n}(Component));\nexport default withPseudoState(AvatarItem);\n//# sourceMappingURL=AvatarItem.js.map"]},"metadata":{},"sourceType":"module"}