{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _css from \"@emotion/css\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React, { PureComponent, Fragment } from 'react';\nimport raf from 'raf-schd';\nimport { Global } from '@emotion/core';\nimport { withAnalyticsEvents } from '@atlaskit/analytics-next';\nimport * as colors from '@atlaskit/theme/colors';\nimport ChevronLeft from '@atlaskit/icon/glyph/chevron-left';\nimport ChevronRight from '@atlaskit/icon/glyph/chevron-right';\nimport Tooltip from '@atlaskit/tooltip';\nimport { navigationExpandedCollapsed } from '../../../common/analytics';\nimport { GLOBAL_NAV_WIDTH, CONTENT_NAV_WIDTH, CONTENT_NAV_WIDTH_COLLAPSED, GLOBAL_NAV_COLLAPSE_THRESHOLD } from '../../../common/constants';\nimport { Shadow } from '../../../common/primitives';\nvar HANDLE_OFFSET = 4;\nvar INNER_WIDTH = 20;\nvar OUTER_WIDTH = INNER_WIDTH + HANDLE_OFFSET;\nvar HANDLE_WIDTH = 2;\n\nvar shouldResetGrabArea = function shouldResetGrabArea(width) {\n  return width >= GLOBAL_NAV_COLLAPSE_THRESHOLD && width < CONTENT_NAV_WIDTH;\n};\n\nvar preventDefault = function preventDefault(event) {\n  return event.preventDefault();\n};\n\nexport var BodyDragCursor = function BodyDragCursor() {\n  return ___EmotionJSX(Global, {\n    styles: {\n      body: {\n        cursor: 'ew-resize'\n      }\n    }\n  });\n};\n\nvar Outer = function Outer(props) {\n  return ___EmotionJSX(\"div\", _extends({\n    css: /*#__PURE__*/_css({\n      bottom: 0,\n      left: '100%',\n      position: 'absolute',\n      top: 0,\n      transform: 'translateZ(0)',\n      width: OUTER_WIDTH,\n      zIndex: 3 // higher than the scroll hint lines\n\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }, props));\n};\n\nexport var GrabArea = function GrabArea(_ref) {\n  var showHandle = _ref.showHandle,\n      isBold = _ref.isBold,\n      props = _objectWithoutProperties(_ref, [\"showHandle\", \"isBold\"]);\n\n  return ___EmotionJSX(\"div\", _extends({\n    css: /*#__PURE__*/_css({\n      cursor: 'ew-resize',\n      height: '100%',\n      left: -HANDLE_OFFSET,\n      position: 'relative',\n      width: OUTER_WIDTH\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }, props), ___EmotionJSX(\"div\", {\n    css: /*#__PURE__*/_css({\n      backgroundColor: isBold ? colors.B200 : colors.B100,\n      opacity: showHandle ? 1 : 0,\n      height: '100%',\n      left: HANDLE_OFFSET - HANDLE_WIDTH / 2,\n      // the handle should \"straddle\" the dividing line\n      position: 'absolute',\n      transition: 'opacity 200ms',\n      width: HANDLE_WIDTH\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }));\n};\nvar largeHitArea = {\n  left: -8,\n  right: -12,\n  bottom: -8,\n  top: -8\n};\nvar smallHitArea = {\n  left: -4,\n  right: -4,\n  bottom: -4,\n  top: -4\n};\n\nvar Button = function Button(_ref2) {\n  var children = _ref2.children,\n      hasHighlight = _ref2.hasHighlight,\n      innerRef = _ref2.innerRef,\n      isVisible = _ref2.isVisible,\n      hitAreaSize = _ref2.hitAreaSize,\n      props = _objectWithoutProperties(_ref2, [\"children\", \"hasHighlight\", \"innerRef\", \"isVisible\", \"hitAreaSize\"]);\n\n  return ___EmotionJSX(\"button\", _extends({\n    className: \"ak-navigation-resize-button\",\n    type: \"button\",\n    ref: innerRef,\n    css: /*#__PURE__*/_css({\n      background: 0,\n      backgroundColor: 'white',\n      border: 0,\n      borderRadius: '50%',\n      boxShadow: \"0 0 0 1px \".concat(colors.N30A, \", 0 2px 4px 1px \").concat(colors.N30A),\n      color: hasHighlight ? colors.B100 : colors.N200,\n      cursor: 'pointer',\n      height: 24,\n      opacity: isVisible ? 1 : 0,\n      outline: 0,\n      padding: 0,\n      position: 'absolute',\n      top: 32,\n      transition: \"\\n        background-color 100ms linear,\\n        color 100ms linear,\\n        opacity 300ms cubic-bezier(0.2, 0, 0, 1),\\n        transform 300ms cubic-bezier(0.2, 0, 0, 1)\\n      \",\n      transform: \"translate(-50%)\",\n      width: 24,\n      ':hover': {\n        backgroundColor: colors.B100,\n        color: 'white'\n      },\n      ':active': {\n        backgroundColor: colors.B200,\n        color: 'white'\n      },\n      ':focus': {\n        opacity: 1,\n        backgroundColor: colors.B200,\n        color: 'white'\n      }\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }, props), ___EmotionJSX(\"div\", {\n    // increase hit-area\n    css: /*#__PURE__*/_css(_objectSpread({\n      position: 'absolute'\n    }, hitAreaSize === 'small' ? smallHitArea : largeHitArea), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }), children);\n}; // tinker with the DOM directly by setting style properties, updates the grab bar position by changing padding-left and width.\n\n\nfunction updateResizeAreaPosition(elements, width) {\n  elements.forEach(function (_ref3) {\n    var property = _ref3.property,\n        ref = _ref3.ref;\n    var newValue = \"\".concat(width, \"px\");\n    var oldValue = ref.style.getPropertyValue(property); // avoid thrashing\n\n    if (oldValue === newValue) return; // direct attribute manipulation\n\n    ref.style.setProperty(property, newValue);\n  });\n} // helper for tooltip content keyboard shortcut highlight\n\n\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"jeedki\",\n  styles: \"align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;\"\n} : {\n  name: \"jeedki\",\n  styles: \"align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL0xheW91dE1hbmFnZXIvUmVzaXplQ29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5S00iLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvTGF5b3V0TWFuYWdlci9SZXNpemVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYtc2NoZCc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IHdpdGhBbmFseXRpY3NFdmVudHMgfSBmcm9tICdAYXRsYXNraXQvYW5hbHl0aWNzLW5leHQnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ0BhdGxhc2tpdC90aGVtZS9jb2xvcnMnO1xuaW1wb3J0IENoZXZyb25MZWZ0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tbGVmdCc7XG5pbXBvcnQgQ2hldnJvblJpZ2h0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tcmlnaHQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnQGF0bGFza2l0L3Rvb2x0aXAnO1xuXG5pbXBvcnQgeyBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vYW5hbHl0aWNzJztcbmltcG9ydCB7XG4gIEdMT0JBTF9OQVZfV0lEVEgsXG4gIENPTlRFTlRfTkFWX1dJRFRILFxuICBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQsXG4gIEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xELFxufSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9wcmltaXRpdmVzJztcblxuY29uc3QgSEFORExFX09GRlNFVCA9IDQ7XG5jb25zdCBJTk5FUl9XSURUSCA9IDIwO1xuY29uc3QgT1VURVJfV0lEVEggPSBJTk5FUl9XSURUSCArIEhBTkRMRV9PRkZTRVQ7XG5jb25zdCBIQU5ETEVfV0lEVEggPSAyO1xuY29uc3Qgc2hvdWxkUmVzZXRHcmFiQXJlYSA9IHdpZHRoID0+IHtcbiAgcmV0dXJuIHdpZHRoID49IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEICYmIHdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEg7XG59O1xuY29uc3QgcHJldmVudERlZmF1bHQgPSBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5leHBvcnQgY29uc3QgQm9keURyYWdDdXJzb3IgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e3tcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJyxcbiAgICAgIH0sXG4gICAgfX1cbiAgLz5cbik7XG5cbmNvbnN0IE91dGVyID0gcHJvcHMgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgICAgekluZGV4OiAzLCAvLyBoaWdoZXIgdGhhbiB0aGUgc2Nyb2xsIGhpbnQgbGluZXNcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBHcmFiQXJlYSA9ICh7IHNob3dIYW5kbGUsIGlzQm9sZCwgLi4ucHJvcHMgfSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAtSEFORExFX09GRlNFVCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNCb2xkID8gY29sb3JzLkIyMDAgOiBjb2xvcnMuQjEwMCxcbiAgICAgICAgb3BhY2l0eTogc2hvd0hhbmRsZSA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbGVmdDogSEFORExFX09GRlNFVCAtIEhBTkRMRV9XSURUSCAvIDIsIC8vIHRoZSBoYW5kbGUgc2hvdWxkIFwic3RyYWRkbGVcIiB0aGUgZGl2aWRpbmcgbGluZVxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjAwbXMnLFxuICAgICAgICB3aWR0aDogSEFORExFX1dJRFRILFxuICAgICAgfX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5jb25zdCBsYXJnZUhpdEFyZWEgPSB7XG4gIGxlZnQ6IC04LFxuICByaWdodDogLTEyLFxuICBib3R0b206IC04LFxuICB0b3A6IC04LFxufTtcbmNvbnN0IHNtYWxsSGl0QXJlYSA9IHtcbiAgbGVmdDogLTQsXG4gIHJpZ2h0OiAtNCxcbiAgYm90dG9tOiAtNCxcbiAgdG9wOiAtNCxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBoYXNIaWdobGlnaHQsXG4gIGlubmVyUmVmLFxuICBpc1Zpc2libGUsXG4gIGhpdEFyZWFTaXplLFxuICAuLi5wcm9wc1xufSkgPT4gKFxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPVwiYWstbmF2aWdhdGlvbi1yZXNpemUtYnV0dG9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICByZWY9e2lubmVyUmVmfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxcHggJHtjb2xvcnMuTjMwQX0sIDAgMnB4IDRweCAxcHggJHtjb2xvcnMuTjMwQX1gLFxuICAgICAgY29sb3I6IGhhc0hpZ2hsaWdodCA/IGNvbG9ycy5CMTAwIDogY29sb3JzLk4yMDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBvcGFjaXR5OiBpc1Zpc2libGUgPyAxIDogMCxcbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDMyLFxuICAgICAgdHJhbnNpdGlvbjogYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcixcbiAgICAgICAgY29sb3IgMTAwbXMgbGluZWFyLFxuICAgICAgICBvcGFjaXR5IDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpLFxuICAgICAgICB0cmFuc2Zvcm0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlcbiAgICAgIGAsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSlgLFxuICAgICAgd2lkdGg6IDI0LFxuXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5CMTAwLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgLy8gaW5jcmVhc2UgaGl0LWFyZWFcbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKGhpdEFyZWFTaXplID09PSAnc21hbGwnID8gc21hbGxIaXRBcmVhIDogbGFyZ2VIaXRBcmVhKSxcbiAgICAgIH19XG4gICAgLz5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuLy8gdGlua2VyIHdpdGggdGhlIERPTSBkaXJlY3RseSBieSBzZXR0aW5nIHN0eWxlIHByb3BlcnRpZXMsIHVwZGF0ZXMgdGhlIGdyYWIgYmFyIHBvc2l0aW9uIGJ5IGNoYW5naW5nIHBhZGRpbmctbGVmdCBhbmQgd2lkdGguXG5mdW5jdGlvbiB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24oZWxlbWVudHMsIHdpZHRoKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goKHsgcHJvcGVydHksIHJlZiB9KSA9PiB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBgJHt3aWR0aH1weGA7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSByZWYuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAvLyBhdm9pZCB0aHJhc2hpbmdcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG5cbiAgICAvLyBkaXJlY3QgYXR0cmlidXRlIG1hbmlwdWxhdGlvblxuICAgIHJlZi5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgbmV3VmFsdWUpO1xuICB9KTtcbn1cblxuLy8gaGVscGVyIGZvciB0b29sdGlwIGNvbnRlbnQga2V5Ym9hcmQgc2hvcnRjdXQgaGlnaGxpZ2h0XG5mdW5jdGlvbiBtYWtlVG9vbHRpcE5vZGUoeyB0ZXh0LCBjaGFyIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzcGFuPnt0ZXh0fTwvc3Bhbj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuTjQwMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgICAgcGFkZGluZzogJzFweCA4cHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hhcn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vKiBOT1RFOiBleHBlcmltZW50YWwgcHJvcHMgdXNlIGFuIHVuZGVyc2NvcmUgKi9cbmNsYXNzIFJlc2l6ZUNvbnRyb2wgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcblxuICBsYXN0V2lkdGg7XG5cbiAgd3JhcHBlcjtcblxuICBzdGF0ZSA9IHtcbiAgICBkZWx0YTogMCxcbiAgICBkaWREcmFnT3BlbjogZmFsc2UsXG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgaW5pdGlhbFdpZHRoOiAwLFxuICAgIGluaXRpYWxYOiAwLFxuICAgIG1vdXNlSXNEb3duOiBmYWxzZSxcbiAgICBtb3VzZUlzT3ZlckdyYWJBcmVhOiBmYWxzZSxcbiAgICBzaG93R3JhYkFyZWE6IHRydWUsXG4gICAgd2lkdGg6IHRoaXMucHJvcHMubmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGgsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpc0dyYWJBcmVhRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgY29uc3Qge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgICAgZXhwZXJpbWVudGFsX2ZseW91dE9uSG92ZXI6IEVYUEVSSU1FTlRBTF9GTFlPVVRfT05fSE9WRVIsXG4gICAgICBmbHlvdXRJc09wZW4sXG4gICAgICBuYXZpZ2F0aW9uLFxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gcmVzb2x2ZSBcImhvdmVyIGxvY2tpbmdcIiBpc3N1ZSB3aXRoIHJlc2l6ZSBncmFiIGFyZWFcbiAgICBpZiAoRVhQRVJJTUVOVEFMX0ZMWU9VVF9PTl9IT1ZFUikge1xuICAgICAgY29uc3Qgc2hvd0dyYWJBcmVhID0gIWlzQ29sbGFwc2VkICYmICFmbHlvdXRJc09wZW47XG4gICAgICBjb25zdCBtb3VzZUlzT3ZlckdyYWJBcmVhID0gc2hvd0dyYWJBcmVhXG4gICAgICAgID8gc3RhdGUubW91c2VJc092ZXJHcmFiQXJlYVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb3VzZUlzT3ZlckdyYWJBcmVhLFxuICAgICAgICBzaG93R3JhYkFyZWEsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgb25SZXNpemVyQ2hldnJvbkNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnByb3BzLmZseW91dElzT3BlbiA/ICdjaGV2cm9uSG92ZXInIDogJ2NoZXZyb24nO1xuICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UodHJpZ2dlcik7XG4gIH07XG5cbiAgbW91c2VFbnRlckdyYWJBcmVhID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3VzZUlzT3ZlckdyYWJBcmVhOiB0cnVlIH0pO1xuICB9O1xuXG4gIG1vdXNlTGVhdmVHcmFiQXJlYSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW91c2VJc092ZXJHcmFiQXJlYTogZmFsc2UgfSk7XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSB0cmlnZ2VyID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24sIGNyZWF0ZUFuYWx5dGljc0V2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld0NvbGxhcHNlZFN0YXRlID0gIW5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgbmF2aWdhdGlvbi50b2dnbGVDb2xsYXBzZSgpO1xuICAgIG5hdmlnYXRpb25FeHBhbmRlZENvbGxhcHNlZChjcmVhdGVBbmFseXRpY3NFdmVudCwge1xuICAgICAgdHJpZ2dlcixcbiAgICAgIGlzQ29sbGFwc2VkOiBuZXdDb2xsYXBzZWRTdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVSZXNpemVTdGFydCA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBpbml0aWFsWCA9IGV2ZW50LnBhZ2VYO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGluaXRpYWxYLCBtb3VzZUlzRG93bjogdHJ1ZSB9KTtcblxuICAgIC8vIGF0dGFjaCBoYW5kbGVycyAoaGFuZGxlUmVzaXplU3RhcnQgaXMgYSBib3VuZCB0byBvbk1vdXNlRG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIGluaXRpYWxpemVEcmFnID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBkZWx0YSA9IGV2ZW50LnBhZ2VYIC0gdGhpcy5zdGF0ZS5pbml0aWFsWDtcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gb25seSBpbml0aWFsaXplIHdoZW4gZHJhZyBpbnRlbnRpb24gaXMgXCJleHBhbmRcIlxuICAgIGlmIChpc0NvbGxhcHNlZCAmJiBkZWx0YSA8PSAwKSB7XG4gICAgICB0aGlzLmludmFsaWREcmFnQXR0ZW1wdGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaW5pdGlhbFdpZHRoID0gbmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGg7XG4gICAgbGV0IGRpZERyYWdPcGVuID0gZmFsc2U7XG5cbiAgICAvLyBOT1RFXG4gICAgLy8gaWYgdGhlIHByb2R1Y3QgbmF2IGlzIGNvbGxhcHNlZCBhbmQgdGhlIGNvbnN1bWVyIHN0YXJ0cyBkcmFnZ2luZyBpdCBvcGVuXG4gICAgLy8gd2UgbXVzdCBleHBhbmQgaXQgYW5kIGRyYWcgc2hvdWxkIHN0YXJ0IGZyb20gMC5cbiAgICBpZiAoaXNDb2xsYXBzZWQpIHtcbiAgICAgIGluaXRpYWxXaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICAgIGRpZERyYWdPcGVuID0gdHJ1ZTtcbiAgICAgIG5hdmlnYXRpb24ubWFudWFsUmVzaXplU3RhcnQoe1xuICAgICAgICBwcm9kdWN0TmF2V2lkdGg6IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRCxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hdmlnYXRpb24ubWFudWFsUmVzaXplU3RhcnQobmF2aWdhdGlvbi5zdGF0ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpZERyYWdPcGVuLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmc6IHRydWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVzaXplID0gcmFmKGV2ZW50ID0+IHtcbiAgICBjb25zdCB7IG11dGF0aW9uUmVmcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGluaXRpYWxYLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmcsIG1vdXNlSXNEb3duIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gb24gb2NjYXNpb24gYSBtb3VzZSBtb3ZlIGV2ZW50IG9jY3VycyBiZWZvcmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYSBjaGFuY2UgdG8gZGV0YWNoXG4gICAgaWYgKCFtb3VzZUlzRG93bikgcmV0dXJuO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBkcmFnZ2luZ1xuICAgIGlmICghaXNEcmFnZ2luZykge1xuICAgICAgdGhpcy5pbml0aWFsaXplRHJhZyhldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgdGhlIHByb2R1Y3QgbmF2IHRvIGJlIDc1JSBvZiB0aGUgYXZhaWxhYmxlIHBhZ2Ugd2lkdGhcbiAgICBjb25zdCBtYXhXaWR0aCA9IE1hdGgucm91bmQoKHdpbmRvdy5pbm5lcldpZHRoIC8gNCkgKiAzKTtcbiAgICBjb25zdCBtaW5XaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICBjb25zdCBhZGp1c3RlZE1heCA9IG1heFdpZHRoIC0gaW5pdGlhbFdpZHRoIC0gR0xPQkFMX05BVl9XSURUSDtcbiAgICBjb25zdCBhZGp1c3RlZE1pbiA9IG1pbldpZHRoIC0gaW5pdGlhbFdpZHRoO1xuXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1heChcbiAgICAgIE1hdGgubWluKGV2ZW50LnBhZ2VYIC0gaW5pdGlhbFgsIGFkanVzdGVkTWF4KSxcbiAgICAgIGFkanVzdGVkTWluLFxuICAgICk7XG4gICAgY29uc3Qgd2lkdGggPSBpbml0aWFsV2lkdGggKyBkZWx0YTtcblxuICAgIC8vIGFwcGx5IHVwZGF0ZWQgc3R5bGVzIHRvIHRoZSBhcHBsaWNhYmxlIERPTSBub2Rlc1xuICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbihtdXRhdGlvblJlZnMsIHdpZHRoKTtcblxuICAgIC8vIE5PVEU6IGhpamFjayB0aGUgbWF1YWwgcmVzaXplIGFuZCBmb3JjZSBjb2xsYXBzZSwgY2FuY2VscyBtb3VzZSBldmVudHNcbiAgICBpZiAoZXZlbnQuY2xpZW50WCA8IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VEIH0pO1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemVFbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWFpbnRhaW4gaW50ZXJuYWwgd2lkdGgsIGFwcGxpZWQgdG8gbmF2aWdhdGlvbiBzdGF0ZSBvbiByZXNpemUgZW5kXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGVsdGEsIHdpZHRoIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaGFuZGxlUmVzaXplRW5kID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiwgY3JlYXRlQW5hbHl0aWNzRXZlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZWx0YSwgZGlkRHJhZ09wZW4sIGlzRHJhZ2dpbmcsIHdpZHRoOiBjdXJyZW50V2lkdGggfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXhwYW5kVGhyZXNob2xkID0gMjQ7XG4gICAgY29uc3QgcmVzaXplckNsaWNrZWQgPSAhaXNEcmFnZ2luZyAmJiAhdGhpcy5pbnZhbGlkRHJhZ0F0dGVtcHRlZDtcbiAgICBsZXQgcHVibGlzaFdpZHRoID0gY3VycmVudFdpZHRoO1xuICAgIGxldCBzaG91bGRDb2xsYXBzZSA9IGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGludGVudGlvbiB3YXMganVzdCBhIGNsaWNrLCBhbmQgdG9nZ2xlXG4gICAgaWYgKHJlc2l6ZXJDbGlja2VkKSB7XG4gICAgICBwdWJsaXNoV2lkdGggPSBNYXRoLm1heChDT05URU5UX05BVl9XSURUSCwgY3VycmVudFdpZHRoKTtcbiAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UoJ3Jlc2l6ZXJDbGljaycpO1xuICAgIH1cblxuICAgIC8vIHByZXZlbnQgdGhlIHVzZXIgZnJvbSBjcmVhdGluZyBhbiB1bnVzYWJsZSB3aWR0aFxuICAgIGlmIChwdWJsaXNoV2lkdGggPCBDT05URU5UX05BVl9XSURUSCkge1xuICAgICAgcHVibGlzaFdpZHRoID0gQ09OVEVOVF9OQVZfV0lEVEg7XG4gICAgICBpZiAoZGlkRHJhZ09wZW4gJiYgZGVsdGEgPiBleHBhbmRUaHJlc2hvbGQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFdpZHRoIDwgR0xPQkFMX05BVl9DT0xMQVBTRV9USFJFU0hPTEQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRDb2xsYXBzZSA9IG5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXJlc2l6ZXJDbGlja2VkICYmXG4gICAgICAoKGRpZERyYWdPcGVuICYmICFzaG91bGRDb2xsYXBzZSkgfHwgKCFkaWREcmFnT3BlbiAmJiBzaG91bGRDb2xsYXBzZSkpXG4gICAgKSB7XG4gICAgICBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQoY3JlYXRlQW5hbHl0aWNzRXZlbnQsIHtcbiAgICAgICAgdHJpZ2dlcjogJ3Jlc2l6ZXJEcmFnJyxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IHNob3VsZENvbGxhcHNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgZXZlcnl0aGluZ1xuICAgIHRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpZERyYWdPcGVuOiBmYWxzZSxcbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgbW91c2VJc0Rvd246IGZhbHNlLFxuICAgICAgd2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICB9KTtcblxuICAgIC8vIHB1Ymxpc2ggdGhlIG5ldyB3aWR0aCwgb25jZSByZXNpemluZyBjb21wbGV0ZXNcbiAgICBuYXZpZ2F0aW9uLm1hbnVhbFJlc2l6ZUVuZCh7XG4gICAgICBwcm9kdWN0TmF2V2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICAgIGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSxcbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRSZXNldEdyYWJBcmVhKGN1cnJlbnRXaWR0aCkpIHtcbiAgICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbih0aGlzLnByb3BzLm11dGF0aW9uUmVmcywgQ09OVEVOVF9OQVZfV0lEVEgpO1xuICAgIH1cblxuICAgIC8vIGNsZWFudXBcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc0RyYWdnaW5nLFxuICAgICAgbW91c2VJc0Rvd24sXG4gICAgICBtb3VzZUlzT3ZlckdyYWJBcmVhLFxuICAgICAgc2hvd0dyYWJBcmVhLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQsXG4gICAgICBleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWYsXG4gICAgICBmbHlvdXRJc09wZW4sXG4gICAgICBpc0Rpc2FibGVkOiBpc1Jlc2l6ZURpc2FibGVkLFxuICAgICAgaXNHcmFiQXJlYURpc2FibGVkLFxuICAgICAgb25Nb3VzZU92ZXJCdXR0b25CdWZmZXIsXG4gICAgICBuYXZpZ2F0aW9uLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IG5hdmlnYXRpb24uc3RhdGU7XG5cbiAgICAvLyB0aGUgYnV0dG9uIHNob3VsZG4ndCBcImZsaXBcIiB1bnRpbCB0aGUgZHJhZyBpcyBjb21wbGV0ZVxuICAgIGxldCBCdXR0b25JY29uID0gQ2hldnJvbkxlZnQ7XG4gICAgaWYgKGlzQ29sbGFwc2VkKSBCdXR0b25JY29uID0gQ2hldnJvblJpZ2h0O1xuXG4gICAgY29uc3QgYnV0dG9uID0gKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uUmVzaXplckNoZXZyb25DbGlja31cbiAgICAgICAgb25Nb3VzZURvd249e3ByZXZlbnREZWZhdWx0fVxuICAgICAgICBoaXRBcmVhU2l6ZT17b25Nb3VzZU92ZXJCdXR0b25CdWZmZXIgPyAnbGFyZ2UnIDogJ3NtYWxsJ31cbiAgICAgICAgLy8gbWFpbnRhaW4gc3R5bGVzIHdoZW4gdXNlciBpcyBkcmFnZ2luZ1xuICAgICAgICBpc1Zpc2libGU9e2lzQ29sbGFwc2VkIHx8IG1vdXNlSXNEb3dufVxuICAgICAgICBoYXNIaWdobGlnaHQ9e21vdXNlSXNEb3duIHx8IG1vdXNlSXNPdmVyR3JhYkFyZWF9XG4gICAgICAgIGlubmVyUmVmPXtleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWZ9XG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9eyFpc0NvbGxhcHNlZH1cbiAgICAgICAgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuYXZpZ2F0aW9uXCJcbiAgICAgID5cbiAgICAgICAgPEJ1dHRvbkljb24gLz5cbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gICAgY29uc3Qgc2hhZG93RGlyZWN0aW9uID0gZmx5b3V0SXNPcGVuID8gJ3RvIHJpZ2h0JyA6ICd0byBsZWZ0JztcblxuICAgIHJldHVybiAoXG4gICAgICA8T3V0ZXI+XG4gICAgICAgIHtpc0RyYWdnaW5nICYmIDxCb2R5RHJhZ0N1cnNvciAvPn1cbiAgICAgICAgPFNoYWRvdyBkaXJlY3Rpb249e3NoYWRvd0RpcmVjdGlvbn0gaXNCb2xkPXttb3VzZUlzRG93bn0gLz5cbiAgICAgICAgeyFpc1Jlc2l6ZURpc2FibGVkICYmIChcbiAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICB7IWlzR3JhYkFyZWFEaXNhYmxlZCAmJiBzaG93R3JhYkFyZWEgJiYgKFxuICAgICAgICAgICAgICA8R3JhYkFyZWFcbiAgICAgICAgICAgICAgICBpc0JvbGQ9e21vdXNlSXNEb3dufVxuICAgICAgICAgICAgICAgIHNob3dIYW5kbGU9e21vdXNlSXNEb3duIHx8IG1vdXNlSXNPdmVyR3JhYkFyZWF9XG4gICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm1vdXNlRW50ZXJHcmFiQXJlYX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMubW91c2VMZWF2ZUdyYWJBcmVhfVxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZVJlc2l6ZVN0YXJ0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXYgb25Nb3VzZU92ZXI9eyFmbHlvdXRJc09wZW4gPyBvbk1vdXNlT3ZlckJ1dHRvbkJ1ZmZlciA6IG51bGx9PlxuICAgICAgICAgICAgICB7Y29sbGFwc2VUb2dnbGVUb29sdGlwQ29udGVudCA/IChcbiAgICAgICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICAgICAgY29udGVudD17bWFrZVRvb2x0aXBOb2RlKFxuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50KGlzQ29sbGFwc2VkKSxcbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICBkZWxheT17NjAwfVxuICAgICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBPbkNsaWNrXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7YnV0dG9ufVxuICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICBidXR0b25cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L091dGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUmVzaXplQ29udHJvbCBhcyBSZXNpemVDb250cm9sQmFzZSB9O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoQW5hbHl0aWNzRXZlbnRzKCkoUmVzaXplQ29udHJvbCk7XG4iXX0= */\"\n};\n\nfunction makeTooltipNode(_ref4) {\n  var text = _ref4.text,\n      char = _ref4.char;\n  return ___EmotionJSX(\"div\", {\n    css: _ref5\n  }, ___EmotionJSX(\"span\", null, text), ___EmotionJSX(\"div\", {\n    css: /*#__PURE__*/_css({\n      backgroundColor: colors.N400,\n      borderRadius: 2,\n      lineHeight: 1.2,\n      marginLeft: 4,\n      padding: '1px 8px'\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }, char));\n}\n/* NOTE: experimental props use an underscore */\n\n\nvar ResizeControl = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ResizeControl, _PureComponent);\n\n  function ResizeControl() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResizeControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResizeControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"invalidDragAttempted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastWidth\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"wrapper\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      delta: 0,\n      didDragOpen: false,\n      isDragging: false,\n      initialWidth: 0,\n      initialX: 0,\n      mouseIsDown: false,\n      mouseIsOverGrabArea: false,\n      showGrabArea: true,\n      width: _this.props.navigation.state.productNavWidth\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResizerChevronClick\", function () {\n      var trigger = _this.props.flyoutIsOpen ? 'chevronHover' : 'chevron';\n\n      _this.toggleCollapse(trigger);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseEnterGrabArea\", function () {\n      _this.setState({\n        mouseIsOverGrabArea: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseLeaveGrabArea\", function () {\n      _this.setState({\n        mouseIsOverGrabArea: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleCollapse\", function (trigger) {\n      var _this$props = _this.props,\n          navigation = _this$props.navigation,\n          createAnalyticsEvent = _this$props.createAnalyticsEvent;\n      var newCollapsedState = !navigation.state.isCollapsed;\n      navigation.toggleCollapse();\n      navigationExpandedCollapsed(createAnalyticsEvent, {\n        trigger: trigger,\n        isCollapsed: newCollapsedState\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResizeStart\", function (event) {\n      var initialX = event.pageX;\n\n      _this.setState({\n        initialX: initialX,\n        mouseIsDown: true\n      }); // attach handlers (handleResizeStart is a bound to onMouseDown)\n\n\n      window.addEventListener('mousemove', _this.handleResize);\n      window.addEventListener('mouseup', _this.handleResizeEnd);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initializeDrag\", function (event) {\n      var navigation = _this.props.navigation;\n      var delta = event.pageX - _this.state.initialX;\n      var isCollapsed = navigation.state.isCollapsed; // only initialize when drag intention is \"expand\"\n\n      if (isCollapsed && delta <= 0) {\n        _this.invalidDragAttempted = true;\n        return;\n      }\n\n      var initialWidth = navigation.state.productNavWidth;\n      var didDragOpen = false; // NOTE\n      // if the product nav is collapsed and the consumer starts dragging it open\n      // we must expand it and drag should start from 0.\n\n      if (isCollapsed) {\n        initialWidth = CONTENT_NAV_WIDTH_COLLAPSED;\n        didDragOpen = true;\n        navigation.manualResizeStart({\n          productNavWidth: CONTENT_NAV_WIDTH_COLLAPSED,\n          isCollapsed: false\n        });\n      } else {\n        navigation.manualResizeStart(navigation.state);\n      }\n\n      _this.setState({\n        didDragOpen: didDragOpen,\n        initialWidth: initialWidth,\n        isDragging: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResize\", raf(function (event) {\n      var mutationRefs = _this.props.mutationRefs;\n      var _this$state = _this.state,\n          initialX = _this$state.initialX,\n          initialWidth = _this$state.initialWidth,\n          isDragging = _this$state.isDragging,\n          mouseIsDown = _this$state.mouseIsDown; // on occasion a mouse move event occurs before the event listeners\n      // have a chance to detach\n\n      if (!mouseIsDown) return; // initialize dragging\n\n      if (!isDragging) {\n        _this.initializeDrag(event);\n\n        return;\n      } // allow the product nav to be 75% of the available page width\n\n\n      var maxWidth = Math.round(window.innerWidth / 4 * 3);\n      var minWidth = CONTENT_NAV_WIDTH_COLLAPSED;\n      var adjustedMax = maxWidth - initialWidth - GLOBAL_NAV_WIDTH;\n      var adjustedMin = minWidth - initialWidth;\n      var delta = Math.max(Math.min(event.pageX - initialX, adjustedMax), adjustedMin);\n      var width = initialWidth + delta; // apply updated styles to the applicable DOM nodes\n\n      updateResizeAreaPosition(mutationRefs, width); // NOTE: hijack the maual resize and force collapse, cancels mouse events\n\n      if (event.clientX < 0) {\n        _this.setState({\n          width: CONTENT_NAV_WIDTH_COLLAPSED\n        });\n\n        _this.handleResizeEnd();\n      } else {\n        // maintain internal width, applied to navigation state on resize end\n        _this.setState({\n          delta: delta,\n          width: width\n        });\n      }\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResizeEnd\", function () {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          createAnalyticsEvent = _this$props2.createAnalyticsEvent;\n      var _this$state2 = _this.state,\n          delta = _this$state2.delta,\n          didDragOpen = _this$state2.didDragOpen,\n          isDragging = _this$state2.isDragging,\n          currentWidth = _this$state2.width;\n      var expandThreshold = 24;\n      var resizerClicked = !isDragging && !_this.invalidDragAttempted;\n      var publishWidth = currentWidth;\n      var shouldCollapse = false; // check if the intention was just a click, and toggle\n\n      if (resizerClicked) {\n        publishWidth = Math.max(CONTENT_NAV_WIDTH, currentWidth);\n\n        _this.toggleCollapse('resizerClick');\n      } // prevent the user from creating an unusable width\n\n\n      if (publishWidth < CONTENT_NAV_WIDTH) {\n        publishWidth = CONTENT_NAV_WIDTH;\n\n        if (didDragOpen && delta > expandThreshold) {\n          shouldCollapse = false;\n        } else if (currentWidth < GLOBAL_NAV_COLLAPSE_THRESHOLD) {\n          shouldCollapse = true;\n        }\n      } else {\n        shouldCollapse = navigation.state.isCollapsed;\n      }\n\n      if (!resizerClicked && (didDragOpen && !shouldCollapse || !didDragOpen && shouldCollapse)) {\n        navigationExpandedCollapsed(createAnalyticsEvent, {\n          trigger: 'resizerDrag',\n          isCollapsed: shouldCollapse\n        });\n      } // reset everything\n\n\n      _this.invalidDragAttempted = false;\n\n      _this.setState({\n        didDragOpen: false,\n        isDragging: false,\n        mouseIsDown: false,\n        width: publishWidth\n      }); // publish the new width, once resizing completes\n\n\n      navigation.manualResizeEnd({\n        productNavWidth: publishWidth,\n        isCollapsed: shouldCollapse\n      });\n\n      if (shouldResetGrabArea(currentWidth)) {\n        updateResizeAreaPosition(_this.props.mutationRefs, CONTENT_NAV_WIDTH);\n      } // cleanup\n\n\n      window.removeEventListener('mousemove', _this.handleResize);\n      window.removeEventListener('mouseup', _this.handleResizeEnd);\n    });\n\n    return _this;\n  }\n\n  _createClass(ResizeControl, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          isDragging = _this$state3.isDragging,\n          mouseIsDown = _this$state3.mouseIsDown,\n          mouseIsOverGrabArea = _this$state3.mouseIsOverGrabArea,\n          showGrabArea = _this$state3.showGrabArea;\n      var _this$props3 = this.props,\n          collapseToggleTooltipContent = _this$props3.collapseToggleTooltipContent,\n          expandCollapseAffordanceRef = _this$props3.expandCollapseAffordanceRef,\n          flyoutIsOpen = _this$props3.flyoutIsOpen,\n          isResizeDisabled = _this$props3.isDisabled,\n          isGrabAreaDisabled = _this$props3.isGrabAreaDisabled,\n          onMouseOverButtonBuffer = _this$props3.onMouseOverButtonBuffer,\n          navigation = _this$props3.navigation;\n      var isCollapsed = navigation.state.isCollapsed; // the button shouldn't \"flip\" until the drag is complete\n\n      var ButtonIcon = ChevronLeft;\n      if (isCollapsed) ButtonIcon = ChevronRight;\n\n      var button = ___EmotionJSX(Button, {\n        onClick: this.onResizerChevronClick,\n        onMouseDown: preventDefault,\n        hitAreaSize: onMouseOverButtonBuffer ? 'large' : 'small' // maintain styles when user is dragging\n        ,\n        isVisible: isCollapsed || mouseIsDown,\n        hasHighlight: mouseIsDown || mouseIsOverGrabArea,\n        innerRef: expandCollapseAffordanceRef,\n        \"aria-expanded\": !isCollapsed,\n        \"aria-label\": \"Toggle navigation\"\n      }, ___EmotionJSX(ButtonIcon, null));\n\n      var shadowDirection = flyoutIsOpen ? 'to right' : 'to left';\n      return ___EmotionJSX(Outer, null, isDragging && ___EmotionJSX(BodyDragCursor, null), ___EmotionJSX(Shadow, {\n        direction: shadowDirection,\n        isBold: mouseIsDown\n      }), !isResizeDisabled && ___EmotionJSX(Fragment, null, !isGrabAreaDisabled && showGrabArea && ___EmotionJSX(GrabArea, {\n        isBold: mouseIsDown,\n        showHandle: mouseIsDown || mouseIsOverGrabArea,\n        onMouseEnter: this.mouseEnterGrabArea,\n        onMouseLeave: this.mouseLeaveGrabArea,\n        onMouseDown: this.handleResizeStart\n      }), ___EmotionJSX(\"div\", {\n        onMouseOver: !flyoutIsOpen ? onMouseOverButtonBuffer : null\n      }, collapseToggleTooltipContent ? ___EmotionJSX(Tooltip, {\n        content: makeTooltipNode(collapseToggleTooltipContent(isCollapsed)),\n        delay: 600,\n        hideTooltipOnClick: true,\n        position: \"right\"\n      }, button) : button)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var EXPERIMENTAL_FLYOUT_ON_HOVER = props.experimental_flyoutOnHover,\n          flyoutIsOpen = props.flyoutIsOpen,\n          navigation = props.navigation;\n      var isCollapsed = navigation.state.isCollapsed; // resolve \"hover locking\" issue with resize grab area\n\n      if (EXPERIMENTAL_FLYOUT_ON_HOVER) {\n        var showGrabArea = !isCollapsed && !flyoutIsOpen;\n        var mouseIsOverGrabArea = showGrabArea ? state.mouseIsOverGrabArea : false;\n        return {\n          mouseIsOverGrabArea: mouseIsOverGrabArea,\n          showGrabArea: showGrabArea\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ResizeControl;\n}(PureComponent);\n\n_defineProperty(ResizeControl, \"defaultProps\", {\n  isGrabAreaDisabled: false\n});\n\nexport { ResizeControl as ResizeControlBase };\nexport default withAnalyticsEvents()(ResizeControl);","map":{"version":3,"sources":["/home/asirob/Code/atlasmicros/src/main/resources/static/react-atlaskit-example/node_modules/@atlaskit/navigation-next/dist/esm/components/presentational/LayoutManager/ResizeControl.js"],"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_defineProperty","_objectSpread","_objectWithoutProperties","_extends","_css","jsx","___EmotionJSX","React","PureComponent","Fragment","raf","Global","withAnalyticsEvents","colors","ChevronLeft","ChevronRight","Tooltip","navigationExpandedCollapsed","GLOBAL_NAV_WIDTH","CONTENT_NAV_WIDTH","CONTENT_NAV_WIDTH_COLLAPSED","GLOBAL_NAV_COLLAPSE_THRESHOLD","Shadow","HANDLE_OFFSET","INNER_WIDTH","OUTER_WIDTH","HANDLE_WIDTH","shouldResetGrabArea","width","preventDefault","event","BodyDragCursor","styles","body","cursor","Outer","props","css","bottom","left","position","top","transform","zIndex","process","env","NODE_ENV","GrabArea","_ref","showHandle","isBold","height","backgroundColor","B200","B100","opacity","transition","largeHitArea","right","smallHitArea","Button","_ref2","children","hasHighlight","innerRef","isVisible","hitAreaSize","className","type","ref","background","border","borderRadius","boxShadow","concat","N30A","color","N200","outline","padding","updateResizeAreaPosition","elements","forEach","_ref3","property","newValue","oldValue","style","getPropertyValue","setProperty","_ref5","name","map","makeTooltipNode","_ref4","text","char","N400","lineHeight","marginLeft","ResizeControl","_PureComponent","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","call","apply","delta","didDragOpen","isDragging","initialWidth","initialX","mouseIsDown","mouseIsOverGrabArea","showGrabArea","navigation","state","productNavWidth","trigger","flyoutIsOpen","toggleCollapse","setState","_this$props","createAnalyticsEvent","newCollapsedState","isCollapsed","pageX","window","addEventListener","handleResize","handleResizeEnd","invalidDragAttempted","manualResizeStart","mutationRefs","_this$state","initializeDrag","maxWidth","Math","round","innerWidth","minWidth","adjustedMax","adjustedMin","max","min","clientX","_this$props2","_this$state2","currentWidth","expandThreshold","resizerClicked","publishWidth","shouldCollapse","manualResizeEnd","removeEventListener","key","value","render","_this$state3","_this$props3","collapseToggleTooltipContent","expandCollapseAffordanceRef","isResizeDisabled","isDisabled","isGrabAreaDisabled","onMouseOverButtonBuffer","ButtonIcon","button","onClick","onResizerChevronClick","onMouseDown","shadowDirection","direction","onMouseEnter","mouseEnterGrabArea","onMouseLeave","mouseLeaveGrabArea","handleResizeStart","onMouseOver","content","delay","hideTooltipOnClick","getDerivedStateFromProps","EXPERIMENTAL_FLYOUT_ON_HOVER","experimental_flyoutOnHover","ResizeControlBase"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _css from \"@emotion/css\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nimport React, { PureComponent, Fragment } from 'react';\nimport raf from 'raf-schd';\nimport { Global } from '@emotion/core';\nimport { withAnalyticsEvents } from '@atlaskit/analytics-next';\nimport * as colors from '@atlaskit/theme/colors';\nimport ChevronLeft from '@atlaskit/icon/glyph/chevron-left';\nimport ChevronRight from '@atlaskit/icon/glyph/chevron-right';\nimport Tooltip from '@atlaskit/tooltip';\nimport { navigationExpandedCollapsed } from '../../../common/analytics';\nimport { GLOBAL_NAV_WIDTH, CONTENT_NAV_WIDTH, CONTENT_NAV_WIDTH_COLLAPSED, GLOBAL_NAV_COLLAPSE_THRESHOLD } from '../../../common/constants';\nimport { Shadow } from '../../../common/primitives';\nvar HANDLE_OFFSET = 4;\nvar INNER_WIDTH = 20;\nvar OUTER_WIDTH = INNER_WIDTH + HANDLE_OFFSET;\nvar HANDLE_WIDTH = 2;\n\nvar shouldResetGrabArea = function shouldResetGrabArea(width) {\n  return width >= GLOBAL_NAV_COLLAPSE_THRESHOLD && width < CONTENT_NAV_WIDTH;\n};\n\nvar preventDefault = function preventDefault(event) {\n  return event.preventDefault();\n};\n\nexport var BodyDragCursor = function BodyDragCursor() {\n  return ___EmotionJSX(Global, {\n    styles: {\n      body: {\n        cursor: 'ew-resize'\n      }\n    }\n  });\n};\n\nvar Outer = function Outer(props) {\n  return ___EmotionJSX(\"div\", _extends({\n    css:\n    /*#__PURE__*/\n    _css({\n      bottom: 0,\n      left: '100%',\n      position: 'absolute',\n      top: 0,\n      transform: 'translateZ(0)',\n      width: OUTER_WIDTH,\n      zIndex: 3 // higher than the scroll hint lines\n\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL0xheW91dE1hbmFnZXIvUmVzaXplQ29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1Q0kiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvTGF5b3V0TWFuYWdlci9SZXNpemVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYtc2NoZCc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IHdpdGhBbmFseXRpY3NFdmVudHMgfSBmcm9tICdAYXRsYXNraXQvYW5hbHl0aWNzLW5leHQnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ0BhdGxhc2tpdC90aGVtZS9jb2xvcnMnO1xuaW1wb3J0IENoZXZyb25MZWZ0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tbGVmdCc7XG5pbXBvcnQgQ2hldnJvblJpZ2h0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tcmlnaHQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnQGF0bGFza2l0L3Rvb2x0aXAnO1xuXG5pbXBvcnQgeyBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vYW5hbHl0aWNzJztcbmltcG9ydCB7XG4gIEdMT0JBTF9OQVZfV0lEVEgsXG4gIENPTlRFTlRfTkFWX1dJRFRILFxuICBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQsXG4gIEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xELFxufSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9wcmltaXRpdmVzJztcblxuY29uc3QgSEFORExFX09GRlNFVCA9IDQ7XG5jb25zdCBJTk5FUl9XSURUSCA9IDIwO1xuY29uc3QgT1VURVJfV0lEVEggPSBJTk5FUl9XSURUSCArIEhBTkRMRV9PRkZTRVQ7XG5jb25zdCBIQU5ETEVfV0lEVEggPSAyO1xuY29uc3Qgc2hvdWxkUmVzZXRHcmFiQXJlYSA9IHdpZHRoID0+IHtcbiAgcmV0dXJuIHdpZHRoID49IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEICYmIHdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEg7XG59O1xuY29uc3QgcHJldmVudERlZmF1bHQgPSBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5leHBvcnQgY29uc3QgQm9keURyYWdDdXJzb3IgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e3tcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJyxcbiAgICAgIH0sXG4gICAgfX1cbiAgLz5cbik7XG5cbmNvbnN0IE91dGVyID0gcHJvcHMgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgICAgekluZGV4OiAzLCAvLyBoaWdoZXIgdGhhbiB0aGUgc2Nyb2xsIGhpbnQgbGluZXNcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBHcmFiQXJlYSA9ICh7IHNob3dIYW5kbGUsIGlzQm9sZCwgLi4ucHJvcHMgfSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAtSEFORExFX09GRlNFVCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNCb2xkID8gY29sb3JzLkIyMDAgOiBjb2xvcnMuQjEwMCxcbiAgICAgICAgb3BhY2l0eTogc2hvd0hhbmRsZSA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbGVmdDogSEFORExFX09GRlNFVCAtIEhBTkRMRV9XSURUSCAvIDIsIC8vIHRoZSBoYW5kbGUgc2hvdWxkIFwic3RyYWRkbGVcIiB0aGUgZGl2aWRpbmcgbGluZVxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjAwbXMnLFxuICAgICAgICB3aWR0aDogSEFORExFX1dJRFRILFxuICAgICAgfX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5jb25zdCBsYXJnZUhpdEFyZWEgPSB7XG4gIGxlZnQ6IC04LFxuICByaWdodDogLTEyLFxuICBib3R0b206IC04LFxuICB0b3A6IC04LFxufTtcbmNvbnN0IHNtYWxsSGl0QXJlYSA9IHtcbiAgbGVmdDogLTQsXG4gIHJpZ2h0OiAtNCxcbiAgYm90dG9tOiAtNCxcbiAgdG9wOiAtNCxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBoYXNIaWdobGlnaHQsXG4gIGlubmVyUmVmLFxuICBpc1Zpc2libGUsXG4gIGhpdEFyZWFTaXplLFxuICAuLi5wcm9wc1xufSkgPT4gKFxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPVwiYWstbmF2aWdhdGlvbi1yZXNpemUtYnV0dG9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICByZWY9e2lubmVyUmVmfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxcHggJHtjb2xvcnMuTjMwQX0sIDAgMnB4IDRweCAxcHggJHtjb2xvcnMuTjMwQX1gLFxuICAgICAgY29sb3I6IGhhc0hpZ2hsaWdodCA/IGNvbG9ycy5CMTAwIDogY29sb3JzLk4yMDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBvcGFjaXR5OiBpc1Zpc2libGUgPyAxIDogMCxcbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDMyLFxuICAgICAgdHJhbnNpdGlvbjogYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcixcbiAgICAgICAgY29sb3IgMTAwbXMgbGluZWFyLFxuICAgICAgICBvcGFjaXR5IDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpLFxuICAgICAgICB0cmFuc2Zvcm0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlcbiAgICAgIGAsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSlgLFxuICAgICAgd2lkdGg6IDI0LFxuXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5CMTAwLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgLy8gaW5jcmVhc2UgaGl0LWFyZWFcbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKGhpdEFyZWFTaXplID09PSAnc21hbGwnID8gc21hbGxIaXRBcmVhIDogbGFyZ2VIaXRBcmVhKSxcbiAgICAgIH19XG4gICAgLz5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuLy8gdGlua2VyIHdpdGggdGhlIERPTSBkaXJlY3RseSBieSBzZXR0aW5nIHN0eWxlIHByb3BlcnRpZXMsIHVwZGF0ZXMgdGhlIGdyYWIgYmFyIHBvc2l0aW9uIGJ5IGNoYW5naW5nIHBhZGRpbmctbGVmdCBhbmQgd2lkdGguXG5mdW5jdGlvbiB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24oZWxlbWVudHMsIHdpZHRoKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goKHsgcHJvcGVydHksIHJlZiB9KSA9PiB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBgJHt3aWR0aH1weGA7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSByZWYuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAvLyBhdm9pZCB0aHJhc2hpbmdcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG5cbiAgICAvLyBkaXJlY3QgYXR0cmlidXRlIG1hbmlwdWxhdGlvblxuICAgIHJlZi5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgbmV3VmFsdWUpO1xuICB9KTtcbn1cblxuLy8gaGVscGVyIGZvciB0b29sdGlwIGNvbnRlbnQga2V5Ym9hcmQgc2hvcnRjdXQgaGlnaGxpZ2h0XG5mdW5jdGlvbiBtYWtlVG9vbHRpcE5vZGUoeyB0ZXh0LCBjaGFyIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzcGFuPnt0ZXh0fTwvc3Bhbj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuTjQwMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgICAgcGFkZGluZzogJzFweCA4cHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hhcn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vKiBOT1RFOiBleHBlcmltZW50YWwgcHJvcHMgdXNlIGFuIHVuZGVyc2NvcmUgKi9cbmNsYXNzIFJlc2l6ZUNvbnRyb2wgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcblxuICBsYXN0V2lkdGg7XG5cbiAgd3JhcHBlcjtcblxuICBzdGF0ZSA9IHtcbiAgICBkZWx0YTogMCxcbiAgICBkaWREcmFnT3BlbjogZmFsc2UsXG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgaW5pdGlhbFdpZHRoOiAwLFxuICAgIGluaXRpYWxYOiAwLFxuICAgIG1vdXNlSXNEb3duOiBmYWxzZSxcbiAgICBtb3VzZUlzT3ZlckdyYWJBcmVhOiBmYWxzZSxcbiAgICBzaG93R3JhYkFyZWE6IHRydWUsXG4gICAgd2lkdGg6IHRoaXMucHJvcHMubmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGgsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpc0dyYWJBcmVhRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgY29uc3Qge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgICAgZXhwZXJpbWVudGFsX2ZseW91dE9uSG92ZXI6IEVYUEVSSU1FTlRBTF9GTFlPVVRfT05fSE9WRVIsXG4gICAgICBmbHlvdXRJc09wZW4sXG4gICAgICBuYXZpZ2F0aW9uLFxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gcmVzb2x2ZSBcImhvdmVyIGxvY2tpbmdcIiBpc3N1ZSB3aXRoIHJlc2l6ZSBncmFiIGFyZWFcbiAgICBpZiAoRVhQRVJJTUVOVEFMX0ZMWU9VVF9PTl9IT1ZFUikge1xuICAgICAgY29uc3Qgc2hvd0dyYWJBcmVhID0gIWlzQ29sbGFwc2VkICYmICFmbHlvdXRJc09wZW47XG4gICAgICBjb25zdCBtb3VzZUlzT3ZlckdyYWJBcmVhID0gc2hvd0dyYWJBcmVhXG4gICAgICAgID8gc3RhdGUubW91c2VJc092ZXJHcmFiQXJlYVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb3VzZUlzT3ZlckdyYWJBcmVhLFxuICAgICAgICBzaG93R3JhYkFyZWEsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgb25SZXNpemVyQ2hldnJvbkNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnByb3BzLmZseW91dElzT3BlbiA/ICdjaGV2cm9uSG92ZXInIDogJ2NoZXZyb24nO1xuICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UodHJpZ2dlcik7XG4gIH07XG5cbiAgbW91c2VFbnRlckdyYWJBcmVhID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3VzZUlzT3ZlckdyYWJBcmVhOiB0cnVlIH0pO1xuICB9O1xuXG4gIG1vdXNlTGVhdmVHcmFiQXJlYSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW91c2VJc092ZXJHcmFiQXJlYTogZmFsc2UgfSk7XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSB0cmlnZ2VyID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24sIGNyZWF0ZUFuYWx5dGljc0V2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld0NvbGxhcHNlZFN0YXRlID0gIW5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgbmF2aWdhdGlvbi50b2dnbGVDb2xsYXBzZSgpO1xuICAgIG5hdmlnYXRpb25FeHBhbmRlZENvbGxhcHNlZChjcmVhdGVBbmFseXRpY3NFdmVudCwge1xuICAgICAgdHJpZ2dlcixcbiAgICAgIGlzQ29sbGFwc2VkOiBuZXdDb2xsYXBzZWRTdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVSZXNpemVTdGFydCA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBpbml0aWFsWCA9IGV2ZW50LnBhZ2VYO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGluaXRpYWxYLCBtb3VzZUlzRG93bjogdHJ1ZSB9KTtcblxuICAgIC8vIGF0dGFjaCBoYW5kbGVycyAoaGFuZGxlUmVzaXplU3RhcnQgaXMgYSBib3VuZCB0byBvbk1vdXNlRG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIGluaXRpYWxpemVEcmFnID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBkZWx0YSA9IGV2ZW50LnBhZ2VYIC0gdGhpcy5zdGF0ZS5pbml0aWFsWDtcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gb25seSBpbml0aWFsaXplIHdoZW4gZHJhZyBpbnRlbnRpb24gaXMgXCJleHBhbmRcIlxuICAgIGlmIChpc0NvbGxhcHNlZCAmJiBkZWx0YSA8PSAwKSB7XG4gICAgICB0aGlzLmludmFsaWREcmFnQXR0ZW1wdGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaW5pdGlhbFdpZHRoID0gbmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGg7XG4gICAgbGV0IGRpZERyYWdPcGVuID0gZmFsc2U7XG5cbiAgICAvLyBOT1RFXG4gICAgLy8gaWYgdGhlIHByb2R1Y3QgbmF2IGlzIGNvbGxhcHNlZCBhbmQgdGhlIGNvbnN1bWVyIHN0YXJ0cyBkcmFnZ2luZyBpdCBvcGVuXG4gICAgLy8gd2UgbXVzdCBleHBhbmQgaXQgYW5kIGRyYWcgc2hvdWxkIHN0YXJ0IGZyb20gMC5cbiAgICBpZiAoaXNDb2xsYXBzZWQpIHtcbiAgICAgIGluaXRpYWxXaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICAgIGRpZERyYWdPcGVuID0gdHJ1ZTtcbiAgICAgIG5hdmlnYXRpb24ubWFudWFsUmVzaXplU3RhcnQoe1xuICAgICAgICBwcm9kdWN0TmF2V2lkdGg6IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRCxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hdmlnYXRpb24ubWFudWFsUmVzaXplU3RhcnQobmF2aWdhdGlvbi5zdGF0ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpZERyYWdPcGVuLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmc6IHRydWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVzaXplID0gcmFmKGV2ZW50ID0+IHtcbiAgICBjb25zdCB7IG11dGF0aW9uUmVmcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGluaXRpYWxYLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmcsIG1vdXNlSXNEb3duIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gb24gb2NjYXNpb24gYSBtb3VzZSBtb3ZlIGV2ZW50IG9jY3VycyBiZWZvcmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYSBjaGFuY2UgdG8gZGV0YWNoXG4gICAgaWYgKCFtb3VzZUlzRG93bikgcmV0dXJuO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBkcmFnZ2luZ1xuICAgIGlmICghaXNEcmFnZ2luZykge1xuICAgICAgdGhpcy5pbml0aWFsaXplRHJhZyhldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgdGhlIHByb2R1Y3QgbmF2IHRvIGJlIDc1JSBvZiB0aGUgYXZhaWxhYmxlIHBhZ2Ugd2lkdGhcbiAgICBjb25zdCBtYXhXaWR0aCA9IE1hdGgucm91bmQoKHdpbmRvdy5pbm5lcldpZHRoIC8gNCkgKiAzKTtcbiAgICBjb25zdCBtaW5XaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICBjb25zdCBhZGp1c3RlZE1heCA9IG1heFdpZHRoIC0gaW5pdGlhbFdpZHRoIC0gR0xPQkFMX05BVl9XSURUSDtcbiAgICBjb25zdCBhZGp1c3RlZE1pbiA9IG1pbldpZHRoIC0gaW5pdGlhbFdpZHRoO1xuXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1heChcbiAgICAgIE1hdGgubWluKGV2ZW50LnBhZ2VYIC0gaW5pdGlhbFgsIGFkanVzdGVkTWF4KSxcbiAgICAgIGFkanVzdGVkTWluLFxuICAgICk7XG4gICAgY29uc3Qgd2lkdGggPSBpbml0aWFsV2lkdGggKyBkZWx0YTtcblxuICAgIC8vIGFwcGx5IHVwZGF0ZWQgc3R5bGVzIHRvIHRoZSBhcHBsaWNhYmxlIERPTSBub2Rlc1xuICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbihtdXRhdGlvblJlZnMsIHdpZHRoKTtcblxuICAgIC8vIE5PVEU6IGhpamFjayB0aGUgbWF1YWwgcmVzaXplIGFuZCBmb3JjZSBjb2xsYXBzZSwgY2FuY2VscyBtb3VzZSBldmVudHNcbiAgICBpZiAoZXZlbnQuY2xpZW50WCA8IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VEIH0pO1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemVFbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWFpbnRhaW4gaW50ZXJuYWwgd2lkdGgsIGFwcGxpZWQgdG8gbmF2aWdhdGlvbiBzdGF0ZSBvbiByZXNpemUgZW5kXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGVsdGEsIHdpZHRoIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaGFuZGxlUmVzaXplRW5kID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiwgY3JlYXRlQW5hbHl0aWNzRXZlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZWx0YSwgZGlkRHJhZ09wZW4sIGlzRHJhZ2dpbmcsIHdpZHRoOiBjdXJyZW50V2lkdGggfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXhwYW5kVGhyZXNob2xkID0gMjQ7XG4gICAgY29uc3QgcmVzaXplckNsaWNrZWQgPSAhaXNEcmFnZ2luZyAmJiAhdGhpcy5pbnZhbGlkRHJhZ0F0dGVtcHRlZDtcbiAgICBsZXQgcHVibGlzaFdpZHRoID0gY3VycmVudFdpZHRoO1xuICAgIGxldCBzaG91bGRDb2xsYXBzZSA9IGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGludGVudGlvbiB3YXMganVzdCBhIGNsaWNrLCBhbmQgdG9nZ2xlXG4gICAgaWYgKHJlc2l6ZXJDbGlja2VkKSB7XG4gICAgICBwdWJsaXNoV2lkdGggPSBNYXRoLm1heChDT05URU5UX05BVl9XSURUSCwgY3VycmVudFdpZHRoKTtcbiAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UoJ3Jlc2l6ZXJDbGljaycpO1xuICAgIH1cblxuICAgIC8vIHByZXZlbnQgdGhlIHVzZXIgZnJvbSBjcmVhdGluZyBhbiB1bnVzYWJsZSB3aWR0aFxuICAgIGlmIChwdWJsaXNoV2lkdGggPCBDT05URU5UX05BVl9XSURUSCkge1xuICAgICAgcHVibGlzaFdpZHRoID0gQ09OVEVOVF9OQVZfV0lEVEg7XG4gICAgICBpZiAoZGlkRHJhZ09wZW4gJiYgZGVsdGEgPiBleHBhbmRUaHJlc2hvbGQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFdpZHRoIDwgR0xPQkFMX05BVl9DT0xMQVBTRV9USFJFU0hPTEQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRDb2xsYXBzZSA9IG5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXJlc2l6ZXJDbGlja2VkICYmXG4gICAgICAoKGRpZERyYWdPcGVuICYmICFzaG91bGRDb2xsYXBzZSkgfHwgKCFkaWREcmFnT3BlbiAmJiBzaG91bGRDb2xsYXBzZSkpXG4gICAgKSB7XG4gICAgICBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQoY3JlYXRlQW5hbHl0aWNzRXZlbnQsIHtcbiAgICAgICAgdHJpZ2dlcjogJ3Jlc2l6ZXJEcmFnJyxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IHNob3VsZENvbGxhcHNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgZXZlcnl0aGluZ1xuICAgIHRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpZERyYWdPcGVuOiBmYWxzZSxcbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgbW91c2VJc0Rvd246IGZhbHNlLFxuICAgICAgd2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICB9KTtcblxuICAgIC8vIHB1Ymxpc2ggdGhlIG5ldyB3aWR0aCwgb25jZSByZXNpemluZyBjb21wbGV0ZXNcbiAgICBuYXZpZ2F0aW9uLm1hbnVhbFJlc2l6ZUVuZCh7XG4gICAgICBwcm9kdWN0TmF2V2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICAgIGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSxcbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRSZXNldEdyYWJBcmVhKGN1cnJlbnRXaWR0aCkpIHtcbiAgICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbih0aGlzLnByb3BzLm11dGF0aW9uUmVmcywgQ09OVEVOVF9OQVZfV0lEVEgpO1xuICAgIH1cblxuICAgIC8vIGNsZWFudXBcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc0RyYWdnaW5nLFxuICAgICAgbW91c2VJc0Rvd24sXG4gICAgICBtb3VzZUlzT3ZlckdyYWJBcmVhLFxuICAgICAgc2hvd0dyYWJBcmVhLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQsXG4gICAgICBleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWYsXG4gICAgICBmbHlvdXRJc09wZW4sXG4gICAgICBpc0Rpc2FibGVkOiBpc1Jlc2l6ZURpc2FibGVkLFxuICAgICAgaXNHcmFiQXJlYURpc2FibGVkLFxuICAgICAgb25Nb3VzZU92ZXJCdXR0b25CdWZmZXIsXG4gICAgICBuYXZpZ2F0aW9uLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IG5hdmlnYXRpb24uc3RhdGU7XG5cbiAgICAvLyB0aGUgYnV0dG9uIHNob3VsZG4ndCBcImZsaXBcIiB1bnRpbCB0aGUgZHJhZyBpcyBjb21wbGV0ZVxuICAgIGxldCBCdXR0b25JY29uID0gQ2hldnJvbkxlZnQ7XG4gICAgaWYgKGlzQ29sbGFwc2VkKSBCdXR0b25JY29uID0gQ2hldnJvblJpZ2h0O1xuXG4gICAgY29uc3QgYnV0dG9uID0gKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uUmVzaXplckNoZXZyb25DbGlja31cbiAgICAgICAgb25Nb3VzZURvd249e3ByZXZlbnREZWZhdWx0fVxuICAgICAgICBoaXRBcmVhU2l6ZT17b25Nb3VzZU92ZXJCdXR0b25CdWZmZXIgPyAnbGFyZ2UnIDogJ3NtYWxsJ31cbiAgICAgICAgLy8gbWFpbnRhaW4gc3R5bGVzIHdoZW4gdXNlciBpcyBkcmFnZ2luZ1xuICAgICAgICBpc1Zpc2libGU9e2lzQ29sbGFwc2VkIHx8IG1vdXNlSXNEb3dufVxuICAgICAgICBoYXNIaWdobGlnaHQ9e21vdXNlSXNEb3duIHx8IG1vdXNlSXNPdmVyR3JhYkFyZWF9XG4gICAgICAgIGlubmVyUmVmPXtleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWZ9XG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9eyFpc0NvbGxhcHNlZH1cbiAgICAgICAgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuYXZpZ2F0aW9uXCJcbiAgICAgID5cbiAgICAgICAgPEJ1dHRvbkljb24gLz5cbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gICAgY29uc3Qgc2hhZG93RGlyZWN0aW9uID0gZmx5b3V0SXNPcGVuID8gJ3RvIHJpZ2h0JyA6ICd0byBsZWZ0JztcblxuICAgIHJldHVybiAoXG4gICAgICA8T3V0ZXI+XG4gICAgICAgIHtpc0RyYWdnaW5nICYmIDxCb2R5RHJhZ0N1cnNvciAvPn1cbiAgICAgICAgPFNoYWRvdyBkaXJlY3Rpb249e3NoYWRvd0RpcmVjdGlvbn0gaXNCb2xkPXttb3VzZUlzRG93bn0gLz5cbiAgICAgICAgeyFpc1Jlc2l6ZURpc2FibGVkICYmIChcbiAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICB7IWlzR3JhYkFyZWFEaXNhYmxlZCAmJiBzaG93R3JhYkFyZWEgJiYgKFxuICAgICAgICAgICAgICA8R3JhYkFyZWFcbiAgICAgICAgICAgICAgICBpc0JvbGQ9e21vdXNlSXNEb3dufVxuICAgICAgICAgICAgICAgIHNob3dIYW5kbGU9e21vdXNlSXNEb3duIHx8IG1vdXNlSXNPdmVyR3JhYkFyZWF9XG4gICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm1vdXNlRW50ZXJHcmFiQXJlYX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMubW91c2VMZWF2ZUdyYWJBcmVhfVxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZVJlc2l6ZVN0YXJ0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXYgb25Nb3VzZU92ZXI9eyFmbHlvdXRJc09wZW4gPyBvbk1vdXNlT3ZlckJ1dHRvbkJ1ZmZlciA6IG51bGx9PlxuICAgICAgICAgICAgICB7Y29sbGFwc2VUb2dnbGVUb29sdGlwQ29udGVudCA/IChcbiAgICAgICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICAgICAgY29udGVudD17bWFrZVRvb2x0aXBOb2RlKFxuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50KGlzQ29sbGFwc2VkKSxcbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICBkZWxheT17NjAwfVxuICAgICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBPbkNsaWNrXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7YnV0dG9ufVxuICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICBidXR0b25cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L091dGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUmVzaXplQ29udHJvbCBhcyBSZXNpemVDb250cm9sQmFzZSB9O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoQW5hbHl0aWNzRXZlbnRzKCkoUmVzaXplQ29udHJvbCk7XG4iXX0= */\")\n  }, props));\n};\n\nexport var GrabArea = function GrabArea(_ref) {\n  var showHandle = _ref.showHandle,\n      isBold = _ref.isBold,\n      props = _objectWithoutProperties(_ref, [\"showHandle\", \"isBold\"]);\n\n  return ___EmotionJSX(\"div\", _extends({\n    css:\n    /*#__PURE__*/\n    _css({\n      cursor: 'ew-resize',\n      height: '100%',\n      left: -HANDLE_OFFSET,\n      position: 'relative',\n      width: OUTER_WIDTH\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL0xheW91dE1hbmFnZXIvUmVzaXplQ29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzREkiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvTGF5b3V0TWFuYWdlci9SZXNpemVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYtc2NoZCc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IHdpdGhBbmFseXRpY3NFdmVudHMgfSBmcm9tICdAYXRsYXNraXQvYW5hbHl0aWNzLW5leHQnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ0BhdGxhc2tpdC90aGVtZS9jb2xvcnMnO1xuaW1wb3J0IENoZXZyb25MZWZ0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tbGVmdCc7XG5pbXBvcnQgQ2hldnJvblJpZ2h0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tcmlnaHQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnQGF0bGFza2l0L3Rvb2x0aXAnO1xuXG5pbXBvcnQgeyBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vYW5hbHl0aWNzJztcbmltcG9ydCB7XG4gIEdMT0JBTF9OQVZfV0lEVEgsXG4gIENPTlRFTlRfTkFWX1dJRFRILFxuICBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQsXG4gIEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xELFxufSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9wcmltaXRpdmVzJztcblxuY29uc3QgSEFORExFX09GRlNFVCA9IDQ7XG5jb25zdCBJTk5FUl9XSURUSCA9IDIwO1xuY29uc3QgT1VURVJfV0lEVEggPSBJTk5FUl9XSURUSCArIEhBTkRMRV9PRkZTRVQ7XG5jb25zdCBIQU5ETEVfV0lEVEggPSAyO1xuY29uc3Qgc2hvdWxkUmVzZXRHcmFiQXJlYSA9IHdpZHRoID0+IHtcbiAgcmV0dXJuIHdpZHRoID49IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEICYmIHdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEg7XG59O1xuY29uc3QgcHJldmVudERlZmF1bHQgPSBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5leHBvcnQgY29uc3QgQm9keURyYWdDdXJzb3IgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e3tcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJyxcbiAgICAgIH0sXG4gICAgfX1cbiAgLz5cbik7XG5cbmNvbnN0IE91dGVyID0gcHJvcHMgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgICAgekluZGV4OiAzLCAvLyBoaWdoZXIgdGhhbiB0aGUgc2Nyb2xsIGhpbnQgbGluZXNcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBHcmFiQXJlYSA9ICh7IHNob3dIYW5kbGUsIGlzQm9sZCwgLi4ucHJvcHMgfSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAtSEFORExFX09GRlNFVCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNCb2xkID8gY29sb3JzLkIyMDAgOiBjb2xvcnMuQjEwMCxcbiAgICAgICAgb3BhY2l0eTogc2hvd0hhbmRsZSA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbGVmdDogSEFORExFX09GRlNFVCAtIEhBTkRMRV9XSURUSCAvIDIsIC8vIHRoZSBoYW5kbGUgc2hvdWxkIFwic3RyYWRkbGVcIiB0aGUgZGl2aWRpbmcgbGluZVxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjAwbXMnLFxuICAgICAgICB3aWR0aDogSEFORExFX1dJRFRILFxuICAgICAgfX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5jb25zdCBsYXJnZUhpdEFyZWEgPSB7XG4gIGxlZnQ6IC04LFxuICByaWdodDogLTEyLFxuICBib3R0b206IC04LFxuICB0b3A6IC04LFxufTtcbmNvbnN0IHNtYWxsSGl0QXJlYSA9IHtcbiAgbGVmdDogLTQsXG4gIHJpZ2h0OiAtNCxcbiAgYm90dG9tOiAtNCxcbiAgdG9wOiAtNCxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBoYXNIaWdobGlnaHQsXG4gIGlubmVyUmVmLFxuICBpc1Zpc2libGUsXG4gIGhpdEFyZWFTaXplLFxuICAuLi5wcm9wc1xufSkgPT4gKFxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPVwiYWstbmF2aWdhdGlvbi1yZXNpemUtYnV0dG9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICByZWY9e2lubmVyUmVmfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxcHggJHtjb2xvcnMuTjMwQX0sIDAgMnB4IDRweCAxcHggJHtjb2xvcnMuTjMwQX1gLFxuICAgICAgY29sb3I6IGhhc0hpZ2hsaWdodCA/IGNvbG9ycy5CMTAwIDogY29sb3JzLk4yMDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBvcGFjaXR5OiBpc1Zpc2libGUgPyAxIDogMCxcbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDMyLFxuICAgICAgdHJhbnNpdGlvbjogYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcixcbiAgICAgICAgY29sb3IgMTAwbXMgbGluZWFyLFxuICAgICAgICBvcGFjaXR5IDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpLFxuICAgICAgICB0cmFuc2Zvcm0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlcbiAgICAgIGAsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSlgLFxuICAgICAgd2lkdGg6IDI0LFxuXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5CMTAwLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgLy8gaW5jcmVhc2UgaGl0LWFyZWFcbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKGhpdEFyZWFTaXplID09PSAnc21hbGwnID8gc21hbGxIaXRBcmVhIDogbGFyZ2VIaXRBcmVhKSxcbiAgICAgIH19XG4gICAgLz5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuLy8gdGlua2VyIHdpdGggdGhlIERPTSBkaXJlY3RseSBieSBzZXR0aW5nIHN0eWxlIHByb3BlcnRpZXMsIHVwZGF0ZXMgdGhlIGdyYWIgYmFyIHBvc2l0aW9uIGJ5IGNoYW5naW5nIHBhZGRpbmctbGVmdCBhbmQgd2lkdGguXG5mdW5jdGlvbiB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24oZWxlbWVudHMsIHdpZHRoKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goKHsgcHJvcGVydHksIHJlZiB9KSA9PiB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBgJHt3aWR0aH1weGA7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSByZWYuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAvLyBhdm9pZCB0aHJhc2hpbmdcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG5cbiAgICAvLyBkaXJlY3QgYXR0cmlidXRlIG1hbmlwdWxhdGlvblxuICAgIHJlZi5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgbmV3VmFsdWUpO1xuICB9KTtcbn1cblxuLy8gaGVscGVyIGZvciB0b29sdGlwIGNvbnRlbnQga2V5Ym9hcmQgc2hvcnRjdXQgaGlnaGxpZ2h0XG5mdW5jdGlvbiBtYWtlVG9vbHRpcE5vZGUoeyB0ZXh0LCBjaGFyIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzcGFuPnt0ZXh0fTwvc3Bhbj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuTjQwMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgICAgcGFkZGluZzogJzFweCA4cHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hhcn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vKiBOT1RFOiBleHBlcmltZW50YWwgcHJvcHMgdXNlIGFuIHVuZGVyc2NvcmUgKi9cbmNsYXNzIFJlc2l6ZUNvbnRyb2wgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcblxuICBsYXN0V2lkdGg7XG5cbiAgd3JhcHBlcjtcblxuICBzdGF0ZSA9IHtcbiAgICBkZWx0YTogMCxcbiAgICBkaWREcmFnT3BlbjogZmFsc2UsXG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgaW5pdGlhbFdpZHRoOiAwLFxuICAgIGluaXRpYWxYOiAwLFxuICAgIG1vdXNlSXNEb3duOiBmYWxzZSxcbiAgICBtb3VzZUlzT3ZlckdyYWJBcmVhOiBmYWxzZSxcbiAgICBzaG93R3JhYkFyZWE6IHRydWUsXG4gICAgd2lkdGg6IHRoaXMucHJvcHMubmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGgsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpc0dyYWJBcmVhRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgY29uc3Qge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgICAgZXhwZXJpbWVudGFsX2ZseW91dE9uSG92ZXI6IEVYUEVSSU1FTlRBTF9GTFlPVVRfT05fSE9WRVIsXG4gICAgICBmbHlvdXRJc09wZW4sXG4gICAgICBuYXZpZ2F0aW9uLFxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gcmVzb2x2ZSBcImhvdmVyIGxvY2tpbmdcIiBpc3N1ZSB3aXRoIHJlc2l6ZSBncmFiIGFyZWFcbiAgICBpZiAoRVhQRVJJTUVOVEFMX0ZMWU9VVF9PTl9IT1ZFUikge1xuICAgICAgY29uc3Qgc2hvd0dyYWJBcmVhID0gIWlzQ29sbGFwc2VkICYmICFmbHlvdXRJc09wZW47XG4gICAgICBjb25zdCBtb3VzZUlzT3ZlckdyYWJBcmVhID0gc2hvd0dyYWJBcmVhXG4gICAgICAgID8gc3RhdGUubW91c2VJc092ZXJHcmFiQXJlYVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb3VzZUlzT3ZlckdyYWJBcmVhLFxuICAgICAgICBzaG93R3JhYkFyZWEsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgb25SZXNpemVyQ2hldnJvbkNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnByb3BzLmZseW91dElzT3BlbiA/ICdjaGV2cm9uSG92ZXInIDogJ2NoZXZyb24nO1xuICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UodHJpZ2dlcik7XG4gIH07XG5cbiAgbW91c2VFbnRlckdyYWJBcmVhID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3VzZUlzT3ZlckdyYWJBcmVhOiB0cnVlIH0pO1xuICB9O1xuXG4gIG1vdXNlTGVhdmVHcmFiQXJlYSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW91c2VJc092ZXJHcmFiQXJlYTogZmFsc2UgfSk7XG4gIH07XG5cbiAgdG9nZ2xlQ29sbGFwc2UgPSB0cmlnZ2VyID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24sIGNyZWF0ZUFuYWx5dGljc0V2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld0NvbGxhcHNlZFN0YXRlID0gIW5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgbmF2aWdhdGlvbi50b2dnbGVDb2xsYXBzZSgpO1xuICAgIG5hdmlnYXRpb25FeHBhbmRlZENvbGxhcHNlZChjcmVhdGVBbmFseXRpY3NFdmVudCwge1xuICAgICAgdHJpZ2dlcixcbiAgICAgIGlzQ29sbGFwc2VkOiBuZXdDb2xsYXBzZWRTdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVSZXNpemVTdGFydCA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBpbml0aWFsWCA9IGV2ZW50LnBhZ2VYO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGluaXRpYWxYLCBtb3VzZUlzRG93bjogdHJ1ZSB9KTtcblxuICAgIC8vIGF0dGFjaCBoYW5kbGVycyAoaGFuZGxlUmVzaXplU3RhcnQgaXMgYSBib3VuZCB0byBvbk1vdXNlRG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIGluaXRpYWxpemVEcmFnID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBkZWx0YSA9IGV2ZW50LnBhZ2VYIC0gdGhpcy5zdGF0ZS5pbml0aWFsWDtcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gb25seSBpbml0aWFsaXplIHdoZW4gZHJhZyBpbnRlbnRpb24gaXMgXCJleHBhbmRcIlxuICAgIGlmIChpc0NvbGxhcHNlZCAmJiBkZWx0YSA8PSAwKSB7XG4gICAgICB0aGlzLmludmFsaWREcmFnQXR0ZW1wdGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaW5pdGlhbFdpZHRoID0gbmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGg7XG4gICAgbGV0IGRpZERyYWdPcGVuID0gZmFsc2U7XG5cbiAgICAvLyBOT1RFXG4gICAgLy8gaWYgdGhlIHByb2R1Y3QgbmF2IGlzIGNvbGxhcHNlZCBhbmQgdGhlIGNvbnN1bWVyIHN0YXJ0cyBkcmFnZ2luZyBpdCBvcGVuXG4gICAgLy8gd2UgbXVzdCBleHBhbmQgaXQgYW5kIGRyYWcgc2hvdWxkIHN0YXJ0IGZyb20gMC5cbiAgICBpZiAoaXNDb2xsYXBzZWQpIHtcbiAgICAgIGluaXRpYWxXaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICAgIGRpZERyYWdPcGVuID0gdHJ1ZTtcbiAgICAgIG5hdmlnYXRpb24ubWFudWFsUmVzaXplU3RhcnQoe1xuICAgICAgICBwcm9kdWN0TmF2V2lkdGg6IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRCxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hdmlnYXRpb24ubWFudWFsUmVzaXplU3RhcnQobmF2aWdhdGlvbi5zdGF0ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpZERyYWdPcGVuLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmc6IHRydWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVzaXplID0gcmFmKGV2ZW50ID0+IHtcbiAgICBjb25zdCB7IG11dGF0aW9uUmVmcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGluaXRpYWxYLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmcsIG1vdXNlSXNEb3duIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gb24gb2NjYXNpb24gYSBtb3VzZSBtb3ZlIGV2ZW50IG9jY3VycyBiZWZvcmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYSBjaGFuY2UgdG8gZGV0YWNoXG4gICAgaWYgKCFtb3VzZUlzRG93bikgcmV0dXJuO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBkcmFnZ2luZ1xuICAgIGlmICghaXNEcmFnZ2luZykge1xuICAgICAgdGhpcy5pbml0aWFsaXplRHJhZyhldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgdGhlIHByb2R1Y3QgbmF2IHRvIGJlIDc1JSBvZiB0aGUgYXZhaWxhYmxlIHBhZ2Ugd2lkdGhcbiAgICBjb25zdCBtYXhXaWR0aCA9IE1hdGgucm91bmQoKHdpbmRvdy5pbm5lcldpZHRoIC8gNCkgKiAzKTtcbiAgICBjb25zdCBtaW5XaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICBjb25zdCBhZGp1c3RlZE1heCA9IG1heFdpZHRoIC0gaW5pdGlhbFdpZHRoIC0gR0xPQkFMX05BVl9XSURUSDtcbiAgICBjb25zdCBhZGp1c3RlZE1pbiA9IG1pbldpZHRoIC0gaW5pdGlhbFdpZHRoO1xuXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1heChcbiAgICAgIE1hdGgubWluKGV2ZW50LnBhZ2VYIC0gaW5pdGlhbFgsIGFkanVzdGVkTWF4KSxcbiAgICAgIGFkanVzdGVkTWluLFxuICAgICk7XG4gICAgY29uc3Qgd2lkdGggPSBpbml0aWFsV2lkdGggKyBkZWx0YTtcblxuICAgIC8vIGFwcGx5IHVwZGF0ZWQgc3R5bGVzIHRvIHRoZSBhcHBsaWNhYmxlIERPTSBub2Rlc1xuICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbihtdXRhdGlvblJlZnMsIHdpZHRoKTtcblxuICAgIC8vIE5PVEU6IGhpamFjayB0aGUgbWF1YWwgcmVzaXplIGFuZCBmb3JjZSBjb2xsYXBzZSwgY2FuY2VscyBtb3VzZSBldmVudHNcbiAgICBpZiAoZXZlbnQuY2xpZW50WCA8IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VEIH0pO1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemVFbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWFpbnRhaW4gaW50ZXJuYWwgd2lkdGgsIGFwcGxpZWQgdG8gbmF2aWdhdGlvbiBzdGF0ZSBvbiByZXNpemUgZW5kXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGVsdGEsIHdpZHRoIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaGFuZGxlUmVzaXplRW5kID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiwgY3JlYXRlQW5hbHl0aWNzRXZlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZWx0YSwgZGlkRHJhZ09wZW4sIGlzRHJhZ2dpbmcsIHdpZHRoOiBjdXJyZW50V2lkdGggfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXhwYW5kVGhyZXNob2xkID0gMjQ7XG4gICAgY29uc3QgcmVzaXplckNsaWNrZWQgPSAhaXNEcmFnZ2luZyAmJiAhdGhpcy5pbnZhbGlkRHJhZ0F0dGVtcHRlZDtcbiAgICBsZXQgcHVibGlzaFdpZHRoID0gY3VycmVudFdpZHRoO1xuICAgIGxldCBzaG91bGRDb2xsYXBzZSA9IGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGludGVudGlvbiB3YXMganVzdCBhIGNsaWNrLCBhbmQgdG9nZ2xlXG4gICAgaWYgKHJlc2l6ZXJDbGlja2VkKSB7XG4gICAgICBwdWJsaXNoV2lkdGggPSBNYXRoLm1heChDT05URU5UX05BVl9XSURUSCwgY3VycmVudFdpZHRoKTtcbiAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UoJ3Jlc2l6ZXJDbGljaycpO1xuICAgIH1cblxuICAgIC8vIHByZXZlbnQgdGhlIHVzZXIgZnJvbSBjcmVhdGluZyBhbiB1bnVzYWJsZSB3aWR0aFxuICAgIGlmIChwdWJsaXNoV2lkdGggPCBDT05URU5UX05BVl9XSURUSCkge1xuICAgICAgcHVibGlzaFdpZHRoID0gQ09OVEVOVF9OQVZfV0lEVEg7XG4gICAgICBpZiAoZGlkRHJhZ09wZW4gJiYgZGVsdGEgPiBleHBhbmRUaHJlc2hvbGQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFdpZHRoIDwgR0xPQkFMX05BVl9DT0xMQVBTRV9USFJFU0hPTEQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRDb2xsYXBzZSA9IG5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXJlc2l6ZXJDbGlja2VkICYmXG4gICAgICAoKGRpZERyYWdPcGVuICYmICFzaG91bGRDb2xsYXBzZSkgfHwgKCFkaWREcmFnT3BlbiAmJiBzaG91bGRDb2xsYXBzZSkpXG4gICAgKSB7XG4gICAgICBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQoY3JlYXRlQW5hbHl0aWNzRXZlbnQsIHtcbiAgICAgICAgdHJpZ2dlcjogJ3Jlc2l6ZXJEcmFnJyxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IHNob3VsZENvbGxhcHNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgZXZlcnl0aGluZ1xuICAgIHRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpZERyYWdPcGVuOiBmYWxzZSxcbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgbW91c2VJc0Rvd246IGZhbHNlLFxuICAgICAgd2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICB9KTtcblxuICAgIC8vIHB1Ymxpc2ggdGhlIG5ldyB3aWR0aCwgb25jZSByZXNpemluZyBjb21wbGV0ZXNcbiAgICBuYXZpZ2F0aW9uLm1hbnVhbFJlc2l6ZUVuZCh7XG4gICAgICBwcm9kdWN0TmF2V2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICAgIGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSxcbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRSZXNldEdyYWJBcmVhKGN1cnJlbnRXaWR0aCkpIHtcbiAgICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbih0aGlzLnByb3BzLm11dGF0aW9uUmVmcywgQ09OVEVOVF9OQVZfV0lEVEgpO1xuICAgIH1cblxuICAgIC8vIGNsZWFudXBcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc0RyYWdnaW5nLFxuICAgICAgbW91c2VJc0Rvd24sXG4gICAgICBtb3VzZUlzT3ZlckdyYWJBcmVhLFxuICAgICAgc2hvd0dyYWJBcmVhLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQsXG4gICAgICBleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWYsXG4gICAgICBmbHlvdXRJc09wZW4sXG4gICAgICBpc0Rpc2FibGVkOiBpc1Jlc2l6ZURpc2FibGVkLFxuICAgICAgaXNHcmFiQXJlYURpc2FibGVkLFxuICAgICAgb25Nb3VzZU92ZXJCdXR0b25CdWZmZXIsXG4gICAgICBuYXZpZ2F0aW9uLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IG5hdmlnYXRpb24uc3RhdGU7XG5cbiAgICAvLyB0aGUgYnV0dG9uIHNob3VsZG4ndCBcImZsaXBcIiB1bnRpbCB0aGUgZHJhZyBpcyBjb21wbGV0ZVxuICAgIGxldCBCdXR0b25JY29uID0gQ2hldnJvbkxlZnQ7XG4gICAgaWYgKGlzQ29sbGFwc2VkKSBCdXR0b25JY29uID0gQ2hldnJvblJpZ2h0O1xuXG4gICAgY29uc3QgYnV0dG9uID0gKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBvbkNsaWNrPXt0aGlzLm9uUmVzaXplckNoZXZyb25DbGlja31cbiAgICAgICAgb25Nb3VzZURvd249e3ByZXZlbnREZWZhdWx0fVxuICAgICAgICBoaXRBcmVhU2l6ZT17b25Nb3VzZU92ZXJCdXR0b25CdWZmZXIgPyAnbGFyZ2UnIDogJ3NtYWxsJ31cbiAgICAgICAgLy8gbWFpbnRhaW4gc3R5bGVzIHdoZW4gdXNlciBpcyBkcmFnZ2luZ1xuICAgICAgICBpc1Zpc2libGU9e2lzQ29sbGFwc2VkIHx8IG1vdXNlSXNEb3dufVxuICAgICAgICBoYXNIaWdobGlnaHQ9e21vdXNlSXNEb3duIHx8IG1vdXNlSXNPdmVyR3JhYkFyZWF9XG4gICAgICAgIGlubmVyUmVmPXtleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWZ9XG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9eyFpc0NvbGxhcHNlZH1cbiAgICAgICAgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuYXZpZ2F0aW9uXCJcbiAgICAgID5cbiAgICAgICAgPEJ1dHRvbkljb24gLz5cbiAgICAgIDwvQnV0dG9uPlxuICAgICk7XG4gICAgY29uc3Qgc2hhZG93RGlyZWN0aW9uID0gZmx5b3V0SXNPcGVuID8gJ3RvIHJpZ2h0JyA6ICd0byBsZWZ0JztcblxuICAgIHJldHVybiAoXG4gICAgICA8T3V0ZXI+XG4gICAgICAgIHtpc0RyYWdnaW5nICYmIDxCb2R5RHJhZ0N1cnNvciAvPn1cbiAgICAgICAgPFNoYWRvdyBkaXJlY3Rpb249e3NoYWRvd0RpcmVjdGlvbn0gaXNCb2xkPXttb3VzZUlzRG93bn0gLz5cbiAgICAgICAgeyFpc1Jlc2l6ZURpc2FibGVkICYmIChcbiAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICB7IWlzR3JhYkFyZWFEaXNhYmxlZCAmJiBzaG93R3JhYkFyZWEgJiYgKFxuICAgICAgICAgICAgICA8R3JhYkFyZWFcbiAgICAgICAgICAgICAgICBpc0JvbGQ9e21vdXNlSXNEb3dufVxuICAgICAgICAgICAgICAgIHNob3dIYW5kbGU9e21vdXNlSXNEb3duIHx8IG1vdXNlSXNPdmVyR3JhYkFyZWF9XG4gICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm1vdXNlRW50ZXJHcmFiQXJlYX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMubW91c2VMZWF2ZUdyYWJBcmVhfVxuICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZVJlc2l6ZVN0YXJ0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXYgb25Nb3VzZU92ZXI9eyFmbHlvdXRJc09wZW4gPyBvbk1vdXNlT3ZlckJ1dHRvbkJ1ZmZlciA6IG51bGx9PlxuICAgICAgICAgICAgICB7Y29sbGFwc2VUb2dnbGVUb29sdGlwQ29udGVudCA/IChcbiAgICAgICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICAgICAgY29udGVudD17bWFrZVRvb2x0aXBOb2RlKFxuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50KGlzQ29sbGFwc2VkKSxcbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICBkZWxheT17NjAwfVxuICAgICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBPbkNsaWNrXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7YnV0dG9ufVxuICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICBidXR0b25cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L091dGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUmVzaXplQ29udHJvbCBhcyBSZXNpemVDb250cm9sQmFzZSB9O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoQW5hbHl0aWNzRXZlbnRzKCkoUmVzaXplQ29udHJvbCk7XG4iXX0= */\")\n  }, props), ___EmotionJSX(\"div\", {\n    css:\n    /*#__PURE__*/\n    _css({\n      backgroundColor: isBold ? colors.B200 : colors.B100,\n      opacity: showHandle ? 1 : 0,\n      height: '100%',\n      left: HANDLE_OFFSET - HANDLE_WIDTH / 2,\n      // the handle should \"straddle\" the dividing line\n      position: 'absolute',\n      transition: 'opacity 200ms',\n      width: HANDLE_WIDTH\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }));\n};\nvar largeHitArea = {\n  left: -8,\n  right: -12,\n  bottom: -8,\n  top: -8\n};\nvar smallHitArea = {\n  left: -4,\n  right: -4,\n  bottom: -4,\n  top: -4\n};\n\nvar Button = function Button(_ref2) {\n  var children = _ref2.children,\n      hasHighlight = _ref2.hasHighlight,\n      innerRef = _ref2.innerRef,\n      isVisible = _ref2.isVisible,\n      hitAreaSize = _ref2.hitAreaSize,\n      props = _objectWithoutProperties(_ref2, [\"children\", \"hasHighlight\", \"innerRef\", \"isVisible\", \"hitAreaSize\"]);\n\n  return ___EmotionJSX(\"button\", _extends({\n    className: \"ak-navigation-resize-button\",\n    type: \"button\",\n    ref: innerRef,\n    css:\n    /*#__PURE__*/\n    _css({\n      background: 0,\n      backgroundColor: 'white',\n      border: 0,\n      borderRadius: '50%',\n      boxShadow: \"0 0 0 1px \".concat(colors.N30A, \", 0 2px 4px 1px \").concat(colors.N30A),\n      color: hasHighlight ? colors.B100 : colors.N200,\n      cursor: 'pointer',\n      height: 24,\n      opacity: isVisible ? 1 : 0,\n      outline: 0,\n      padding: 0,\n      position: 'absolute',\n      top: 32,\n      transition: \"\\n        background-color 100ms linear,\\n        color 100ms linear,\\n        opacity 300ms cubic-bezier(0.2, 0, 0, 1),\\n        transform 300ms cubic-bezier(0.2, 0, 0, 1)\\n      \",\n      transform: \"translate(-50%)\",\n      width: 24,\n      ':hover': {\n        backgroundColor: colors.B100,\n        color: 'white'\n      },\n      ':active': {\n        backgroundColor: colors.B200,\n        color: 'white'\n      },\n      ':focus': {\n        opacity: 1,\n        backgroundColor: colors.B200,\n        color: 'white'\n      }\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }, props), ___EmotionJSX(\"div\", {\n    // increase hit-area\n    css:\n    /*#__PURE__*/\n    _css(_objectSpread({\n      position: 'absolute'\n    }, hitAreaSize === 'small' ? smallHitArea : largeHitArea), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }), children);\n}; // tinker with the DOM directly by setting style properties, updates the grab bar position by changing padding-left and width.\n\n\nfunction updateResizeAreaPosition(elements, width) {\n  elements.forEach(function (_ref3) {\n    var property = _ref3.property,\n        ref = _ref3.ref;\n    var newValue = \"\".concat(width, \"px\");\n    var oldValue = ref.style.getPropertyValue(property); // avoid thrashing\n\n    if (oldValue === newValue) return; // direct attribute manipulation\n\n    ref.style.setProperty(property, newValue);\n  });\n} // helper for tooltip content keyboard shortcut highlight\n\n\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"jeedki\",\n  styles: \"align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;\"\n} : {\n  name: \"jeedki\",\n  styles: \"align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nfunction makeTooltipNode(_ref4) {\n  var text = _ref4.text,\n      char = _ref4.char;\n  return ___EmotionJSX(\"div\", {\n    css: _ref5\n  }, ___EmotionJSX(\"span\", null, text), ___EmotionJSX(\"div\", {\n    css:\n    /*#__PURE__*/\n    _css({\n      backgroundColor: colors.N400,\n      borderRadius: 2,\n      lineHeight: 1.2,\n      marginLeft: 4,\n      padding: '1px 8px'\n    }, process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\")\n  }, char));\n}\n/* NOTE: experimental props use an underscore */\n\n\nvar ResizeControl =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ResizeControl, _PureComponent);\n\n  function ResizeControl() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResizeControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResizeControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"invalidDragAttempted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastWidth\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"wrapper\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      delta: 0,\n      didDragOpen: false,\n      isDragging: false,\n      initialWidth: 0,\n      initialX: 0,\n      mouseIsDown: false,\n      mouseIsOverGrabArea: false,\n      showGrabArea: true,\n      width: _this.props.navigation.state.productNavWidth\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResizerChevronClick\", function () {\n      var trigger = _this.props.flyoutIsOpen ? 'chevronHover' : 'chevron';\n\n      _this.toggleCollapse(trigger);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseEnterGrabArea\", function () {\n      _this.setState({\n        mouseIsOverGrabArea: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseLeaveGrabArea\", function () {\n      _this.setState({\n        mouseIsOverGrabArea: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleCollapse\", function (trigger) {\n      var _this$props = _this.props,\n          navigation = _this$props.navigation,\n          createAnalyticsEvent = _this$props.createAnalyticsEvent;\n      var newCollapsedState = !navigation.state.isCollapsed;\n      navigation.toggleCollapse();\n      navigationExpandedCollapsed(createAnalyticsEvent, {\n        trigger: trigger,\n        isCollapsed: newCollapsedState\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResizeStart\", function (event) {\n      var initialX = event.pageX;\n\n      _this.setState({\n        initialX: initialX,\n        mouseIsDown: true\n      }); // attach handlers (handleResizeStart is a bound to onMouseDown)\n\n\n      window.addEventListener('mousemove', _this.handleResize);\n      window.addEventListener('mouseup', _this.handleResizeEnd);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initializeDrag\", function (event) {\n      var navigation = _this.props.navigation;\n      var delta = event.pageX - _this.state.initialX;\n      var isCollapsed = navigation.state.isCollapsed; // only initialize when drag intention is \"expand\"\n\n      if (isCollapsed && delta <= 0) {\n        _this.invalidDragAttempted = true;\n        return;\n      }\n\n      var initialWidth = navigation.state.productNavWidth;\n      var didDragOpen = false; // NOTE\n      // if the product nav is collapsed and the consumer starts dragging it open\n      // we must expand it and drag should start from 0.\n\n      if (isCollapsed) {\n        initialWidth = CONTENT_NAV_WIDTH_COLLAPSED;\n        didDragOpen = true;\n        navigation.manualResizeStart({\n          productNavWidth: CONTENT_NAV_WIDTH_COLLAPSED,\n          isCollapsed: false\n        });\n      } else {\n        navigation.manualResizeStart(navigation.state);\n      }\n\n      _this.setState({\n        didDragOpen: didDragOpen,\n        initialWidth: initialWidth,\n        isDragging: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResize\", raf(function (event) {\n      var mutationRefs = _this.props.mutationRefs;\n      var _this$state = _this.state,\n          initialX = _this$state.initialX,\n          initialWidth = _this$state.initialWidth,\n          isDragging = _this$state.isDragging,\n          mouseIsDown = _this$state.mouseIsDown; // on occasion a mouse move event occurs before the event listeners\n      // have a chance to detach\n\n      if (!mouseIsDown) return; // initialize dragging\n\n      if (!isDragging) {\n        _this.initializeDrag(event);\n\n        return;\n      } // allow the product nav to be 75% of the available page width\n\n\n      var maxWidth = Math.round(window.innerWidth / 4 * 3);\n      var minWidth = CONTENT_NAV_WIDTH_COLLAPSED;\n      var adjustedMax = maxWidth - initialWidth - GLOBAL_NAV_WIDTH;\n      var adjustedMin = minWidth - initialWidth;\n      var delta = Math.max(Math.min(event.pageX - initialX, adjustedMax), adjustedMin);\n      var width = initialWidth + delta; // apply updated styles to the applicable DOM nodes\n\n      updateResizeAreaPosition(mutationRefs, width); // NOTE: hijack the maual resize and force collapse, cancels mouse events\n\n      if (event.clientX < 0) {\n        _this.setState({\n          width: CONTENT_NAV_WIDTH_COLLAPSED\n        });\n\n        _this.handleResizeEnd();\n      } else {\n        // maintain internal width, applied to navigation state on resize end\n        _this.setState({\n          delta: delta,\n          width: width\n        });\n      }\n    }));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResizeEnd\", function () {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          createAnalyticsEvent = _this$props2.createAnalyticsEvent;\n      var _this$state2 = _this.state,\n          delta = _this$state2.delta,\n          didDragOpen = _this$state2.didDragOpen,\n          isDragging = _this$state2.isDragging,\n          currentWidth = _this$state2.width;\n      var expandThreshold = 24;\n      var resizerClicked = !isDragging && !_this.invalidDragAttempted;\n      var publishWidth = currentWidth;\n      var shouldCollapse = false; // check if the intention was just a click, and toggle\n\n      if (resizerClicked) {\n        publishWidth = Math.max(CONTENT_NAV_WIDTH, currentWidth);\n\n        _this.toggleCollapse('resizerClick');\n      } // prevent the user from creating an unusable width\n\n\n      if (publishWidth < CONTENT_NAV_WIDTH) {\n        publishWidth = CONTENT_NAV_WIDTH;\n\n        if (didDragOpen && delta > expandThreshold) {\n          shouldCollapse = false;\n        } else if (currentWidth < GLOBAL_NAV_COLLAPSE_THRESHOLD) {\n          shouldCollapse = true;\n        }\n      } else {\n        shouldCollapse = navigation.state.isCollapsed;\n      }\n\n      if (!resizerClicked && (didDragOpen && !shouldCollapse || !didDragOpen && shouldCollapse)) {\n        navigationExpandedCollapsed(createAnalyticsEvent, {\n          trigger: 'resizerDrag',\n          isCollapsed: shouldCollapse\n        });\n      } // reset everything\n\n\n      _this.invalidDragAttempted = false;\n\n      _this.setState({\n        didDragOpen: false,\n        isDragging: false,\n        mouseIsDown: false,\n        width: publishWidth\n      }); // publish the new width, once resizing completes\n\n\n      navigation.manualResizeEnd({\n        productNavWidth: publishWidth,\n        isCollapsed: shouldCollapse\n      });\n\n      if (shouldResetGrabArea(currentWidth)) {\n        updateResizeAreaPosition(_this.props.mutationRefs, CONTENT_NAV_WIDTH);\n      } // cleanup\n\n\n      window.removeEventListener('mousemove', _this.handleResize);\n      window.removeEventListener('mouseup', _this.handleResizeEnd);\n    });\n\n    return _this;\n  }\n\n  _createClass(ResizeControl, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          isDragging = _this$state3.isDragging,\n          mouseIsDown = _this$state3.mouseIsDown,\n          mouseIsOverGrabArea = _this$state3.mouseIsOverGrabArea,\n          showGrabArea = _this$state3.showGrabArea;\n      var _this$props3 = this.props,\n          collapseToggleTooltipContent = _this$props3.collapseToggleTooltipContent,\n          expandCollapseAffordanceRef = _this$props3.expandCollapseAffordanceRef,\n          flyoutIsOpen = _this$props3.flyoutIsOpen,\n          isResizeDisabled = _this$props3.isDisabled,\n          isGrabAreaDisabled = _this$props3.isGrabAreaDisabled,\n          onMouseOverButtonBuffer = _this$props3.onMouseOverButtonBuffer,\n          navigation = _this$props3.navigation;\n      var isCollapsed = navigation.state.isCollapsed; // the button shouldn't \"flip\" until the drag is complete\n\n      var ButtonIcon = ChevronLeft;\n      if (isCollapsed) ButtonIcon = ChevronRight;\n\n      var button = ___EmotionJSX(Button, {\n        onClick: this.onResizerChevronClick,\n        onMouseDown: preventDefault,\n        hitAreaSize: onMouseOverButtonBuffer ? 'large' : 'small' // maintain styles when user is dragging\n        ,\n        isVisible: isCollapsed || mouseIsDown,\n        hasHighlight: mouseIsDown || mouseIsOverGrabArea,\n        innerRef: expandCollapseAffordanceRef,\n        \"aria-expanded\": !isCollapsed,\n        \"aria-label\": \"Toggle navigation\"\n      }, ___EmotionJSX(ButtonIcon, null));\n\n      var shadowDirection = flyoutIsOpen ? 'to right' : 'to left';\n      return ___EmotionJSX(Outer, null, isDragging && ___EmotionJSX(BodyDragCursor, null), ___EmotionJSX(Shadow, {\n        direction: shadowDirection,\n        isBold: mouseIsDown\n      }), !isResizeDisabled && ___EmotionJSX(Fragment, null, !isGrabAreaDisabled && showGrabArea && ___EmotionJSX(GrabArea, {\n        isBold: mouseIsDown,\n        showHandle: mouseIsDown || mouseIsOverGrabArea,\n        onMouseEnter: this.mouseEnterGrabArea,\n        onMouseLeave: this.mouseLeaveGrabArea,\n        onMouseDown: this.handleResizeStart\n      }), ___EmotionJSX(\"div\", {\n        onMouseOver: !flyoutIsOpen ? onMouseOverButtonBuffer : null\n      }, collapseToggleTooltipContent ? ___EmotionJSX(Tooltip, {\n        content: makeTooltipNode(collapseToggleTooltipContent(isCollapsed)),\n        delay: 600,\n        hideTooltipOnClick: true,\n        position: \"right\"\n      }, button) : button)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var EXPERIMENTAL_FLYOUT_ON_HOVER = props.experimental_flyoutOnHover,\n          flyoutIsOpen = props.flyoutIsOpen,\n          navigation = props.navigation;\n      var isCollapsed = navigation.state.isCollapsed; // resolve \"hover locking\" issue with resize grab area\n\n      if (EXPERIMENTAL_FLYOUT_ON_HOVER) {\n        var showGrabArea = !isCollapsed && !flyoutIsOpen;\n        var mouseIsOverGrabArea = showGrabArea ? state.mouseIsOverGrabArea : false;\n        return {\n          mouseIsOverGrabArea: mouseIsOverGrabArea,\n          showGrabArea: showGrabArea\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ResizeControl;\n}(PureComponent);\n\n_defineProperty(ResizeControl, \"defaultProps\", {\n  isGrabAreaDisabled: false\n});\n\nexport { ResizeControl as ResizeControlBase };\nexport default withAnalyticsEvents()(ResizeControl);"]},"metadata":{},"sourceType":"module"}