{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { uid } from 'react-uid';\nimport invariant from 'tiny-invariant';\nimport { FormContext, IsDisabledContext } from './Form';\nimport FieldWrapper, { Label, RequiredIndicator } from './styled/Field';\n\nfunction isEvent(event) {\n  return Boolean(event && event.target);\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n} // Provides the id of the field to message components.\n// This links the message with the field for screen-readers.\n\n\nexport var FieldId = React.createContext(undefined);\n\nfunction usePreviousRef(current) {\n  var ref = useRef(current); // will be updated on the next render\n\n  useEffect(function () {\n    ref.current = current;\n  }); // return the existing current (pre render)\n\n  return ref;\n}\n\nfunction isShallowEqual(previousValue, currentValue) {\n  if (previousValue === currentValue) {\n    return true;\n  } // not checking functions\n\n\n  if (typeof previousValue === 'function' && typeof currentValue === 'function') {\n    return true;\n  }\n\n  if (Array.isArray(previousValue) && Array.isArray(currentValue)) {\n    return JSON.stringify(previousValue) === JSON.stringify(currentValue);\n  }\n\n  if (typeof previousValue === 'object' && typeof currentValue === 'object') {\n    return JSON.stringify(previousValue) === JSON.stringify(currentValue);\n  }\n\n  return false;\n}\n\nfunction Field(props) {\n  var registerField = useContext(FormContext);\n  var isDisabled = useContext(IsDisabledContext) || props.isDisabled;\n  var defaultValue = isFunction(props.defaultValue) ? props.defaultValue() : props.defaultValue;\n\n  var _a = __read(useState({\n    fieldProps: {\n      onChange: function onChange() {},\n      onBlur: function onBlur() {},\n      onFocus: function onFocus() {},\n      value: defaultValue\n    },\n    error: undefined,\n    valid: false,\n    meta: {\n      dirty: false,\n      dirtySinceLastSubmit: false,\n      touched: false,\n      valid: false,\n      submitting: false,\n      submitFailed: false,\n      error: undefined,\n      submitError: undefined\n    }\n  }), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  var latestPropsRef = usePreviousRef(props);\n  var latestStateRef = usePreviousRef(state);\n  /**\n   * HACK: defaultValue can potentially be an array or object which cannot be\n   * passed directly into a `useEffect` dependency array, since it will trigger\n   * the hook every time.\n   */\n\n  var hasDefaultValueChanged = isShallowEqual(latestPropsRef.current.defaultValue, props.defaultValue);\n  useEffect(function () {\n    if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n      invariant(latestPropsRef.current.name, '@atlaskit/form: Field components have a required name prop');\n    }\n\n    function fieldStateToMeta(value) {\n      if (value === void 0) {\n        value = {};\n      }\n\n      return {\n        dirty: value.dirty || false,\n        dirtySinceLastSubmit: value.dirtySinceLastSubmit || false,\n        touched: value.touched || false,\n        valid: value.valid || false,\n        submitting: value.submitting || false,\n        submitFailed: value.submitFailed || false,\n        error: value.error,\n        submitError: value.submitError\n      };\n    }\n\n    var unregister = registerField(latestPropsRef.current.name, latestPropsRef.current.defaultValue, function (fieldState) {\n      /** Do not update dirtySinceLastSubmit until submission has finished. */\n      var modifiedDirtySinceLastSubmit = fieldState.submitting ? latestStateRef.current.meta.dirtySinceLastSubmit : fieldState.dirtySinceLastSubmit;\n      /** Do not update submitFailed until submission has finished. */\n\n      var modifiedSubmitFailed = fieldState.submitting ? latestStateRef.current.meta.submitFailed : fieldState.submitFailed;\n      /** Do not use submitError if the value has changed. */\n\n      var modifiedSubmitError = modifiedDirtySinceLastSubmit && latestPropsRef.current.validate ? undefined : fieldState.submitError;\n      var modifiedError = modifiedSubmitError || (fieldState.touched || fieldState.dirty) && fieldState.error;\n      /**\n       * If there has been a submit error, then use logic in modifiedError to determine validity,\n       * so we can determine when there is a submit error which we do not want to display\n       * because the value has been changed.\n       */\n\n      var modifiedValid = modifiedSubmitFailed ? modifiedError === undefined : fieldState.valid;\n\n      function getTransform(eventOrValue, currentValue) {\n        if (latestPropsRef.current.transform) {\n          return latestPropsRef.current.transform(eventOrValue, currentValue);\n        }\n\n        if (isEvent(eventOrValue)) {\n          var currentTarget = eventOrValue.currentTarget;\n\n          if (currentTarget.type === 'checkbox') {\n            if (currentTarget.checked) {\n              return currentTarget.value || true;\n            }\n\n            return currentTarget.value ? undefined : false;\n          } else if (currentTarget) {\n            return currentTarget.value;\n          }\n        } else {\n          return eventOrValue;\n        }\n      }\n\n      setState({\n        fieldProps: {\n          onChange: function onChange(e) {\n            fieldState.change(getTransform(e, fieldState.value));\n          },\n          onBlur: fieldState.blur,\n          onFocus: fieldState.focus,\n          value: fieldState.value\n        },\n        error: modifiedError,\n\n        /**\n         * The following parameters are optionally typed in final-form to indicate that not all parameters need\n         * to be subscribed to. We cast them as booleans (using || false), since this is what they are semantically.\n         */\n        valid: modifiedValid || false,\n        meta: fieldStateToMeta(fieldState)\n      });\n    }, {\n      dirty: true,\n      dirtySinceLastSubmit: true,\n      touched: true,\n      valid: true,\n      submitting: true,\n      submitFailed: true,\n      value: true,\n      error: true,\n      submitError: true\n    }, {\n      getValidator: function getValidator() {\n        return function validate(value, formState, fieldState) {\n          var supplied = latestPropsRef.current.validate;\n\n          if (supplied && fieldState) {\n            return supplied(value, formState, fieldStateToMeta(fieldState));\n          }\n        };\n      }\n    });\n    return unregister;\n  }, [latestPropsRef, latestStateRef, registerField, props.name, hasDefaultValueChanged]);\n  var fieldId = useMemo(function () {\n    return props.id ? props.id : props.name + \"-\" + uid({\n      id: props.name\n    });\n  }, [props.id, props.name]);\n\n  var extendedFieldProps = __assign(__assign({}, state.fieldProps), {\n    name: props.name,\n    isDisabled: isDisabled,\n    isInvalid: Boolean(state.error),\n    isRequired: Boolean(props.isRequired),\n    'aria-invalid': state.error ? 'true' : 'false',\n    'aria-labelledby': fieldId + \"-label \" + fieldId + \"-helper \" + fieldId + \"-valid \" + fieldId + \"-error\",\n    id: fieldId\n  });\n\n  return React.createElement(FieldWrapper, null, props.label && React.createElement(Label, {\n    id: fieldId + \"-label\",\n    htmlFor: fieldId\n  }, props.label, props.isRequired && React.createElement(RequiredIndicator, {\n    \"aria-hidden\": \"true\"\n  }, \"*\")), React.createElement(FieldId.Provider, {\n    value: fieldId\n  }, props.children({\n    fieldProps: extendedFieldProps,\n    error: state.error,\n    valid: state.valid,\n    meta: state.meta\n  })));\n}\n\nField.defaultProps = {\n  defaultValue: undefined,\n  isDisabled: false\n};\nexport default Field;","map":{"version":3,"sources":["../../src/Field.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __read } from \"tslib\";\nimport React, { useContext, useEffect, useMemo, useRef, useState, } from 'react';\nimport { uid } from 'react-uid';\nimport invariant from 'tiny-invariant';\nimport { FormContext, IsDisabledContext } from './Form';\nimport FieldWrapper, { Label, RequiredIndicator } from './styled/Field';\nfunction isEvent(event) {\n    return Boolean(event && event.target);\n}\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\n// Provides the id of the field to message components.\n// This links the message with the field for screen-readers.\nexport var FieldId = React.createContext(undefined);\nfunction usePreviousRef(current) {\n    var ref = useRef(current);\n    // will be updated on the next render\n    useEffect(function () {\n        ref.current = current;\n    });\n    // return the existing current (pre render)\n    return ref;\n}\nfunction isShallowEqual(previousValue, currentValue) {\n    if (previousValue === currentValue) {\n        return true;\n    }\n    // not checking functions\n    if (typeof previousValue === 'function' &&\n        typeof currentValue === 'function') {\n        return true;\n    }\n    if (Array.isArray(previousValue) && Array.isArray(currentValue)) {\n        return JSON.stringify(previousValue) === JSON.stringify(currentValue);\n    }\n    if (typeof previousValue === 'object' && typeof currentValue === 'object') {\n        return JSON.stringify(previousValue) === JSON.stringify(currentValue);\n    }\n    return false;\n}\nfunction Field(props) {\n    var registerField = useContext(FormContext);\n    var isDisabled = useContext(IsDisabledContext) || props.isDisabled;\n    var defaultValue = isFunction(props.defaultValue)\n        ? props.defaultValue()\n        : props.defaultValue;\n    var _a = __read(useState({\n        fieldProps: {\n            onChange: function () { },\n            onBlur: function () { },\n            onFocus: function () { },\n            value: defaultValue,\n        },\n        error: undefined,\n        valid: false,\n        meta: {\n            dirty: false,\n            dirtySinceLastSubmit: false,\n            touched: false,\n            valid: false,\n            submitting: false,\n            submitFailed: false,\n            error: undefined,\n            submitError: undefined,\n        },\n    }), 2), state = _a[0], setState = _a[1];\n    var latestPropsRef = usePreviousRef(props);\n    var latestStateRef = usePreviousRef(state);\n    /**\n     * HACK: defaultValue can potentially be an array or object which cannot be\n     * passed directly into a `useEffect` dependency array, since it will trigger\n     * the hook every time.\n     */\n    var hasDefaultValueChanged = isShallowEqual(latestPropsRef.current.defaultValue, props.defaultValue);\n    useEffect(function () {\n        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n            invariant(latestPropsRef.current.name, '@atlaskit/form: Field components have a required name prop');\n        }\n        function fieldStateToMeta(value) {\n            if (value === void 0) { value = {}; }\n            return {\n                dirty: value.dirty || false,\n                dirtySinceLastSubmit: value.dirtySinceLastSubmit || false,\n                touched: value.touched || false,\n                valid: value.valid || false,\n                submitting: value.submitting || false,\n                submitFailed: value.submitFailed || false,\n                error: value.error,\n                submitError: value.submitError,\n            };\n        }\n        var unregister = registerField(latestPropsRef.current.name, latestPropsRef.current.defaultValue, function (fieldState) {\n            /** Do not update dirtySinceLastSubmit until submission has finished. */\n            var modifiedDirtySinceLastSubmit = fieldState.submitting\n                ? latestStateRef.current.meta.dirtySinceLastSubmit\n                : fieldState.dirtySinceLastSubmit;\n            /** Do not update submitFailed until submission has finished. */\n            var modifiedSubmitFailed = fieldState.submitting\n                ? latestStateRef.current.meta.submitFailed\n                : fieldState.submitFailed;\n            /** Do not use submitError if the value has changed. */\n            var modifiedSubmitError = modifiedDirtySinceLastSubmit && latestPropsRef.current.validate\n                ? undefined\n                : fieldState.submitError;\n            var modifiedError = modifiedSubmitError ||\n                ((fieldState.touched || fieldState.dirty) && fieldState.error);\n            /**\n             * If there has been a submit error, then use logic in modifiedError to determine validity,\n             * so we can determine when there is a submit error which we do not want to display\n             * because the value has been changed.\n             */\n            var modifiedValid = modifiedSubmitFailed\n                ? modifiedError === undefined\n                : fieldState.valid;\n            function getTransform(eventOrValue, currentValue) {\n                if (latestPropsRef.current.transform) {\n                    return latestPropsRef.current.transform(eventOrValue, currentValue);\n                }\n                if (isEvent(eventOrValue)) {\n                    var currentTarget = eventOrValue.currentTarget;\n                    if (currentTarget.type === 'checkbox') {\n                        if (currentTarget.checked) {\n                            return currentTarget.value || true;\n                        }\n                        return currentTarget.value ? undefined : false;\n                    }\n                    else if (currentTarget) {\n                        return currentTarget.value;\n                    }\n                }\n                else {\n                    return eventOrValue;\n                }\n            }\n            setState({\n                fieldProps: {\n                    onChange: function (e) {\n                        fieldState.change(getTransform(e, fieldState.value));\n                    },\n                    onBlur: fieldState.blur,\n                    onFocus: fieldState.focus,\n                    value: fieldState.value,\n                },\n                error: modifiedError,\n                /**\n                 * The following parameters are optionally typed in final-form to indicate that not all parameters need\n                 * to be subscribed to. We cast them as booleans (using || false), since this is what they are semantically.\n                 */\n                valid: modifiedValid || false,\n                meta: fieldStateToMeta(fieldState),\n            });\n        }, {\n            dirty: true,\n            dirtySinceLastSubmit: true,\n            touched: true,\n            valid: true,\n            submitting: true,\n            submitFailed: true,\n            value: true,\n            error: true,\n            submitError: true,\n        }, {\n            getValidator: function () {\n                return function validate(value, formState, fieldState) {\n                    var supplied = latestPropsRef.current.validate;\n                    if (supplied && fieldState) {\n                        return supplied(value, formState, fieldStateToMeta(fieldState));\n                    }\n                };\n            },\n        });\n        return unregister;\n    }, [\n        latestPropsRef,\n        latestStateRef,\n        registerField,\n        props.name,\n        hasDefaultValueChanged,\n    ]);\n    var fieldId = useMemo(function () { return (props.id ? props.id : props.name + \"-\" + uid({ id: props.name })); }, [props.id, props.name]);\n    var extendedFieldProps = __assign(__assign({}, state.fieldProps), { name: props.name, isDisabled: isDisabled, isInvalid: Boolean(state.error), isRequired: Boolean(props.isRequired), 'aria-invalid': (state.error ? 'true' : 'false'), 'aria-labelledby': fieldId + \"-label \" + fieldId + \"-helper \" + fieldId + \"-valid \" + fieldId + \"-error\", id: fieldId });\n    return (React.createElement(FieldWrapper, null,\n        props.label && (React.createElement(Label, { id: fieldId + \"-label\", htmlFor: fieldId },\n            props.label,\n            props.isRequired && (React.createElement(RequiredIndicator, { \"aria-hidden\": \"true\" }, \"*\")))),\n        React.createElement(FieldId.Provider, { value: fieldId }, props.children({\n            fieldProps: extendedFieldProps,\n            error: state.error,\n            valid: state.valid,\n            meta: state.meta,\n        }))));\n}\nField.defaultProps = {\n    defaultValue: undefined,\n    isDisabled: false,\n};\nexport default Field;\n//# sourceMappingURL=Field.js.map"]},"metadata":{},"sourceType":"module"}