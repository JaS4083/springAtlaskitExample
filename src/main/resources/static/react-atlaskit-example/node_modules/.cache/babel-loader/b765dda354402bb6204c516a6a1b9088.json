{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { withAnalyticsEvents, withAnalyticsContext } from '@atlaskit/analytics-next';\nexport var navigationChannel = 'navigation';\n\nvar getDisplayName = function getDisplayName(component) {\n  return component ? component.displayName || component.name : undefined;\n};\n\nvar kebabToCamelCase = function kebabToCamelCase(str) {\n  return \"\".concat(str).replace(/-([a-z])/gi, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\nexport var navigationItemClicked = function navigationItemClicked(Component, componentName) {\n  var useActionSubjectId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return withAnalyticsContext({\n    componentName: componentName\n  })(withAnalyticsEvents({\n    onClick: function onClick(createAnalyticsEvent, props) {\n      var id = kebabToCamelCase(props.id);\n      var basePayload = {\n        action: 'clicked',\n        actionSubject: 'navigationItem',\n        attributes: {\n          componentName: componentName,\n          iconSource: getDisplayName(props.icon) || getDisplayName(props.before),\n          navigationItemIndex: props.index\n        }\n      };\n      var payload;\n\n      if (useActionSubjectId) {\n        payload = _objectSpread({}, basePayload, {\n          actionSubjectId: id\n        });\n      } else {\n        var attributes = basePayload.attributes,\n            basePayloadSansAttributes = _objectWithoutProperties(basePayload, [\"attributes\"]);\n\n        payload = _objectSpread({}, basePayloadSansAttributes, {\n          attributes: _objectSpread({}, attributes, {\n            itemId: id\n          })\n        });\n      }\n\n      var event = createAnalyticsEvent(payload);\n      event.fire(navigationChannel);\n      return null;\n    }\n  })(Component));\n};\nexport var navigationUILoaded = function navigationUILoaded(createAnalyticsEvent, _ref) {\n  var layer = _ref.layer;\n  return createAnalyticsEvent({\n    action: 'initialised',\n    actionSubject: 'navigationUI',\n    actionSubjectId: layer,\n    eventType: 'operational'\n  }).fire(navigationChannel);\n};\nexport var navigationExpandedCollapsed = function navigationExpandedCollapsed(createAnalyticsEvent, _ref2) {\n  var isCollapsed = _ref2.isCollapsed,\n      trigger = _ref2.trigger;\n  return createAnalyticsEvent({\n    action: isCollapsed ? 'collapsed' : 'expanded',\n    actionSubject: 'productNavigation',\n    attributes: {\n      trigger: trigger\n    }\n  }).fire(navigationChannel);\n};","map":{"version":3,"sources":["/home/asirob/Code/atlasmicros/src/main/resources/static/react-atlaskit-example/node_modules/@atlaskit/navigation-next/dist/esm/common/analytics.js"],"names":["_objectWithoutProperties","_objectSpread","withAnalyticsEvents","withAnalyticsContext","navigationChannel","getDisplayName","component","displayName","name","undefined","kebabToCamelCase","str","concat","replace","g","toUpperCase","navigationItemClicked","Component","componentName","useActionSubjectId","arguments","length","onClick","createAnalyticsEvent","props","id","basePayload","action","actionSubject","attributes","iconSource","icon","before","navigationItemIndex","index","payload","actionSubjectId","basePayloadSansAttributes","itemId","event","fire","navigationUILoaded","_ref","layer","eventType","navigationExpandedCollapsed","_ref2","isCollapsed","trigger"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { withAnalyticsEvents, withAnalyticsContext } from '@atlaskit/analytics-next';\nexport var navigationChannel = 'navigation';\n\nvar getDisplayName = function getDisplayName(component) {\n  return component ? component.displayName || component.name : undefined;\n};\n\nvar kebabToCamelCase = function kebabToCamelCase(str) {\n  return \"\".concat(str).replace(/-([a-z])/gi, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\nexport var navigationItemClicked = function navigationItemClicked(Component, componentName) {\n  var useActionSubjectId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return withAnalyticsContext({\n    componentName: componentName\n  })(withAnalyticsEvents({\n    onClick: function onClick(createAnalyticsEvent, props) {\n      var id = kebabToCamelCase(props.id);\n      var basePayload = {\n        action: 'clicked',\n        actionSubject: 'navigationItem',\n        attributes: {\n          componentName: componentName,\n          iconSource: getDisplayName(props.icon) || getDisplayName(props.before),\n          navigationItemIndex: props.index\n        }\n      };\n      var payload;\n\n      if (useActionSubjectId) {\n        payload = _objectSpread({}, basePayload, {\n          actionSubjectId: id\n        });\n      } else {\n        var attributes = basePayload.attributes,\n            basePayloadSansAttributes = _objectWithoutProperties(basePayload, [\"attributes\"]);\n\n        payload = _objectSpread({}, basePayloadSansAttributes, {\n          attributes: _objectSpread({}, attributes, {\n            itemId: id\n          })\n        });\n      }\n\n      var event = createAnalyticsEvent(payload);\n      event.fire(navigationChannel);\n      return null;\n    }\n  })(Component));\n};\nexport var navigationUILoaded = function navigationUILoaded(createAnalyticsEvent, _ref) {\n  var layer = _ref.layer;\n  return createAnalyticsEvent({\n    action: 'initialised',\n    actionSubject: 'navigationUI',\n    actionSubjectId: layer,\n    eventType: 'operational'\n  }).fire(navigationChannel);\n};\nexport var navigationExpandedCollapsed = function navigationExpandedCollapsed(createAnalyticsEvent, _ref2) {\n  var isCollapsed = _ref2.isCollapsed,\n      trigger = _ref2.trigger;\n  return createAnalyticsEvent({\n    action: isCollapsed ? 'collapsed' : 'expanded',\n    actionSubject: 'productNavigation',\n    attributes: {\n      trigger: trigger\n    }\n  }).fire(navigationChannel);\n};"]},"metadata":{},"sourceType":"module"}