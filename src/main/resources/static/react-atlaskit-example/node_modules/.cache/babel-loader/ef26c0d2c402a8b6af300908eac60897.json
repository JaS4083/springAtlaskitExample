{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport React, { Component } from 'react';\n/**\n * Styling a avatar is complicated and there are a number of properties which\n * inform its appearance. We want to be able to style any arbitrary component\n * like a Link, but we don't want to pass all of these appearance-related props\n * through to the component or underlying DOM node. This component acts as a\n * layer which catches the appearance-related properties so that they can be\n * used by styled-components, then passes the rest of the props on to the custom\n * component.\n */\n\nvar CustomComponentProxy =\n/** @class */\nfunction (_super) {\n  __extends(CustomComponentProxy, _super);\n\n  function CustomComponentProxy() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CustomComponentProxy.prototype.render = function () {\n    var _a = this.props,\n        appearance = _a.appearance,\n        avatar = _a.avatar,\n        borderColor = _a.borderColor,\n        ProxiedComponent = _a.component,\n        enableTooltip = _a.enableTooltip,\n        groupAppearance = _a.groupAppearance,\n        innerRef = _a.innerRef,\n        isActive = _a.isActive,\n        isDisabled = _a.isDisabled,\n        isFocus = _a.isFocus,\n        isHover = _a.isHover,\n        isSelected = _a.isSelected,\n        primaryText = _a.primaryText,\n        secondaryText = _a.secondaryText,\n        stackIndex = _a.stackIndex,\n        rest = __rest(_a, [\"appearance\", \"avatar\", \"borderColor\", \"component\", \"enableTooltip\", \"groupAppearance\", \"innerRef\", \"isActive\", \"isDisabled\", \"isFocus\", \"isHover\", \"isSelected\", \"primaryText\", \"secondaryText\", \"stackIndex\"]);\n\n    return ProxiedComponent ? React.createElement(ProxiedComponent, __assign({}, rest)) : null;\n  };\n\n  return CustomComponentProxy;\n}(Component);\n\nexport default CustomComponentProxy;","map":{"version":3,"sources":["../../../src/components/CustomComponentProxy.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,SAAhB,QAAiC,OAAjC;AAcA;;;;;;;;;;AASA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkD,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAAlD,WAAA,oBAAA,GAAA;;AAwBC;;AArBC,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,EAAA,GAAA,KAAA,KAAN;AAAA,QACE,UAAA,GAAA,EAAA,CAAA,UADF;AAAA,QAEE,MAAA,GAAA,EAAA,CAAA,MAFF;AAAA,QAGE,WAAA,GAAA,EAAA,CAAA,WAHF;AAAA,QAIE,gBAAA,GAAA,EAAA,CAAA,SAJF;AAAA,QAKE,aAAA,GAAA,EAAA,CAAA,aALF;AAAA,QAME,eAAA,GAAA,EAAA,CAAA,eANF;AAAA,QAOE,QAAA,GAAA,EAAA,CAAA,QAPF;AAAA,QAQE,QAAA,GAAA,EAAA,CAAA,QARF;AAAA,QASE,UAAA,GAAA,EAAA,CAAA,UATF;AAAA,QAUE,OAAA,GAAA,EAAA,CAAA,OAVF;AAAA,QAWE,OAAA,GAAA,EAAA,CAAA,OAXF;AAAA,QAYE,UAAA,GAAA,EAAA,CAAA,UAZF;AAAA,QAaE,WAAA,GAAA,EAAA,CAAA,WAbF;AAAA,QAcE,aAAA,GAAA,EAAA,CAAA,aAdF;AAAA,QAeE,UAAA,GAAA,EAAA,CAAA,UAfF;AAAA,QAgBE,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,YAAA,EAAA,QAAA,EAAA,aAAA,EAAA,WAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,YAAA,EAAA,aAAA,EAAA,eAAA,EAAA,YAAA,CAAA,CAhBF;;AAkBA,WAAO,gBAAgB,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,QAAA,CAAA,EAAA,EAAK,IAAL,CAAjB,CAAH,GAAoC,IAA3D;AACD,GApBD;;AAqBF,SAAA,oBAAA;AAAC,CAxBD,CAAkD,SAAlD,CAAA","sourceRoot":"","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport React, { Component } from 'react';\n/**\n * Styling a avatar is complicated and there are a number of properties which\n * inform its appearance. We want to be able to style any arbitrary component\n * like a Link, but we don't want to pass all of these appearance-related props\n * through to the component or underlying DOM node. This component acts as a\n * layer which catches the appearance-related properties so that they can be\n * used by styled-components, then passes the rest of the props on to the custom\n * component.\n */\nvar CustomComponentProxy = /** @class */ (function (_super) {\n    __extends(CustomComponentProxy, _super);\n    function CustomComponentProxy() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CustomComponentProxy.prototype.render = function () {\n        var _a = this.props, appearance = _a.appearance, avatar = _a.avatar, borderColor = _a.borderColor, ProxiedComponent = _a.component, enableTooltip = _a.enableTooltip, groupAppearance = _a.groupAppearance, innerRef = _a.innerRef, isActive = _a.isActive, isDisabled = _a.isDisabled, isFocus = _a.isFocus, isHover = _a.isHover, isSelected = _a.isSelected, primaryText = _a.primaryText, secondaryText = _a.secondaryText, stackIndex = _a.stackIndex, rest = __rest(_a, [\"appearance\", \"avatar\", \"borderColor\", \"component\", \"enableTooltip\", \"groupAppearance\", \"innerRef\", \"isActive\", \"isDisabled\", \"isFocus\", \"isHover\", \"isSelected\", \"primaryText\", \"secondaryText\", \"stackIndex\"]);\n        return ProxiedComponent ? React.createElement(ProxiedComponent, __assign({}, rest)) : null;\n    };\n    return CustomComponentProxy;\n}(Component));\nexport default CustomComponentProxy;\n//# sourceMappingURL=CustomComponentProxy.js.map"]},"metadata":{},"sourceType":"module"}