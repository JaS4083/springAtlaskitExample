"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ResizeControlBase = exports.GrabArea = exports.BodyDragCursor = void 0;

var _core = require("@emotion/core");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _react = _interopRequireWildcard(require("react"));

var _rafSchd = _interopRequireDefault(require("raf-schd"));

var _analyticsNext = require("@atlaskit/analytics-next");

var colors = _interopRequireWildcard(require("@atlaskit/theme/colors"));

var _chevronLeft = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-left"));

var _chevronRight = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-right"));

var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));

var _analytics = require("../../../common/analytics");

var _constants = require("../../../common/constants");

var _primitives = require("../../../common/primitives");

var HANDLE_OFFSET = 4;
var INNER_WIDTH = 20;
var OUTER_WIDTH = INNER_WIDTH + HANDLE_OFFSET;
var HANDLE_WIDTH = 2;

var shouldResetGrabArea = function shouldResetGrabArea(width) {
  return width >= _constants.GLOBAL_NAV_COLLAPSE_THRESHOLD && width < _constants.CONTENT_NAV_WIDTH;
};

var preventDefault = function preventDefault(event) {
  return event.preventDefault();
};

var BodyDragCursor = function BodyDragCursor() {
  return (0, _core.jsx)(_core.Global, {
    styles: {
      body: {
        cursor: 'ew-resize'
      }
    }
  });
};

exports.BodyDragCursor = BodyDragCursor;

var Outer = function Outer(props) {
  return (0, _core.jsx)("div", (0, _extends2.default)({
    css:
    /*#__PURE__*/
    (0, _css2.default)({
      bottom: 0,
      left: '100%',
      position: 'absolute',
      top: 0,
      transform: 'translateZ(0)',
      width: OUTER_WIDTH,
      zIndex: 3 // higher than the scroll hint lines

    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props));
};

var GrabArea = function GrabArea(_ref) {
  var showHandle = _ref.showHandle,
      isBold = _ref.isBold,
      props = (0, _objectWithoutProperties2.default)(_ref, ["showHandle", "isBold"]);
  return (0, _core.jsx)("div", (0, _extends2.default)({
    css:
    /*#__PURE__*/
    (0, _css2.default)({
      cursor: 'ew-resize',
      height: '100%',
      left: -HANDLE_OFFSET,
      position: 'relative',
      width: OUTER_WIDTH
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2.default)({
      backgroundColor: isBold ? colors.B200 : colors.B100,
      opacity: showHandle ? 1 : 0,
      height: '100%',
      left: HANDLE_OFFSET - HANDLE_WIDTH / 2,
      // the handle should "straddle" the dividing line
      position: 'absolute',
      transition: 'opacity 200ms',
      width: HANDLE_WIDTH
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }));
};

exports.GrabArea = GrabArea;
var largeHitArea = {
  left: -8,
  right: -12,
  bottom: -8,
  top: -8
};
var smallHitArea = {
  left: -4,
  right: -4,
  bottom: -4,
  top: -4
};

var Button = function Button(_ref2) {
  var children = _ref2.children,
      hasHighlight = _ref2.hasHighlight,
      innerRef = _ref2.innerRef,
      isVisible = _ref2.isVisible,
      hitAreaSize = _ref2.hitAreaSize,
      props = (0, _objectWithoutProperties2.default)(_ref2, ["children", "hasHighlight", "innerRef", "isVisible", "hitAreaSize"]);
  return (0, _core.jsx)("button", (0, _extends2.default)({
    className: "ak-navigation-resize-button",
    type: "button",
    ref: innerRef,
    css:
    /*#__PURE__*/
    (0, _css2.default)({
      background: 0,
      backgroundColor: 'white',
      border: 0,
      borderRadius: '50%',
      boxShadow: "0 0 0 1px ".concat(colors.N30A, ", 0 2px 4px 1px ").concat(colors.N30A),
      color: hasHighlight ? colors.B100 : colors.N200,
      cursor: 'pointer',
      height: 24,
      opacity: isVisible ? 1 : 0,
      outline: 0,
      padding: 0,
      position: 'absolute',
      top: 32,
      transition: "\n        background-color 100ms linear,\n        color 100ms linear,\n        opacity 300ms cubic-bezier(0.2, 0, 0, 1),\n        transform 300ms cubic-bezier(0.2, 0, 0, 1)\n      ",
      transform: "translate(-50%)",
      width: 24,
      ':hover': {
        backgroundColor: colors.B100,
        color: 'white'
      },
      ':active': {
        backgroundColor: colors.B200,
        color: 'white'
      },
      ':focus': {
        opacity: 1,
        backgroundColor: colors.B200,
        color: 'white'
      }
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props), (0, _core.jsx)("div", {
    // increase hit-area
    css:
    /*#__PURE__*/
    (0, _css2.default)((0, _objectSpread2.default)({
      position: 'absolute'
    }, hitAreaSize === 'small' ? smallHitArea : largeHitArea), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }), children);
}; // tinker with the DOM directly by setting style properties, updates the grab bar position by changing padding-left and width.


function updateResizeAreaPosition(elements, width) {
  elements.forEach(function (_ref3) {
    var property = _ref3.property,
        ref = _ref3.ref;
    var newValue = "".concat(width, "px");
    var oldValue = ref.style.getPropertyValue(property); // avoid thrashing

    if (oldValue === newValue) return; // direct attribute manipulation

    ref.style.setProperty(property, newValue);
  });
} // helper for tooltip content keyboard shortcut highlight


var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "jeedki",
  styles: "align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;"
} : {
  name: "jeedki",
  styles: "align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function makeTooltipNode(_ref4) {
  var text = _ref4.text,
      char = _ref4.char;
  return (0, _core.jsx)("div", {
    css: _ref5
  }, (0, _core.jsx)("span", null, text), (0, _core.jsx)("div", {
    css:
    /*#__PURE__*/
    (0, _css2.default)({
      backgroundColor: colors.N400,
      borderRadius: 2,
      lineHeight: 1.2,
      marginLeft: 4,
      padding: '1px 8px'
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, char));
}
/* NOTE: experimental props use an underscore */


var ResizeControl =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(ResizeControl, _PureComponent);

  function ResizeControl() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ResizeControl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ResizeControl)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "invalidDragAttempted", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastWidth", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "wrapper", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      delta: 0,
      didDragOpen: false,
      isDragging: false,
      initialWidth: 0,
      initialX: 0,
      mouseIsDown: false,
      mouseIsOverGrabArea: false,
      showGrabArea: true,
      width: _this.props.navigation.state.productNavWidth
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResizerChevronClick", function () {
      var trigger = _this.props.flyoutIsOpen ? 'chevronHover' : 'chevron';

      _this.toggleCollapse(trigger);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mouseEnterGrabArea", function () {
      _this.setState({
        mouseIsOverGrabArea: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mouseLeaveGrabArea", function () {
      _this.setState({
        mouseIsOverGrabArea: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleCollapse", function (trigger) {
      var _this$props = _this.props,
          navigation = _this$props.navigation,
          createAnalyticsEvent = _this$props.createAnalyticsEvent;
      var newCollapsedState = !navigation.state.isCollapsed;
      navigation.toggleCollapse();
      (0, _analytics.navigationExpandedCollapsed)(createAnalyticsEvent, {
        trigger: trigger,
        isCollapsed: newCollapsedState
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleResizeStart", function (event) {
      var initialX = event.pageX;

      _this.setState({
        initialX: initialX,
        mouseIsDown: true
      }); // attach handlers (handleResizeStart is a bound to onMouseDown)


      window.addEventListener('mousemove', _this.handleResize);
      window.addEventListener('mouseup', _this.handleResizeEnd);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initializeDrag", function (event) {
      var navigation = _this.props.navigation;
      var delta = event.pageX - _this.state.initialX;
      var isCollapsed = navigation.state.isCollapsed; // only initialize when drag intention is "expand"

      if (isCollapsed && delta <= 0) {
        _this.invalidDragAttempted = true;
        return;
      }

      var initialWidth = navigation.state.productNavWidth;
      var didDragOpen = false; // NOTE
      // if the product nav is collapsed and the consumer starts dragging it open
      // we must expand it and drag should start from 0.

      if (isCollapsed) {
        initialWidth = _constants.CONTENT_NAV_WIDTH_COLLAPSED;
        didDragOpen = true;
        navigation.manualResizeStart({
          productNavWidth: _constants.CONTENT_NAV_WIDTH_COLLAPSED,
          isCollapsed: false
        });
      } else {
        navigation.manualResizeStart(navigation.state);
      }

      _this.setState({
        didDragOpen: didDragOpen,
        initialWidth: initialWidth,
        isDragging: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleResize", (0, _rafSchd.default)(function (event) {
      var mutationRefs = _this.props.mutationRefs;
      var _this$state = _this.state,
          initialX = _this$state.initialX,
          initialWidth = _this$state.initialWidth,
          isDragging = _this$state.isDragging,
          mouseIsDown = _this$state.mouseIsDown; // on occasion a mouse move event occurs before the event listeners
      // have a chance to detach

      if (!mouseIsDown) return; // initialize dragging

      if (!isDragging) {
        _this.initializeDrag(event);

        return;
      } // allow the product nav to be 75% of the available page width


      var maxWidth = Math.round(window.innerWidth / 4 * 3);
      var minWidth = _constants.CONTENT_NAV_WIDTH_COLLAPSED;
      var adjustedMax = maxWidth - initialWidth - _constants.GLOBAL_NAV_WIDTH;
      var adjustedMin = minWidth - initialWidth;
      var delta = Math.max(Math.min(event.pageX - initialX, adjustedMax), adjustedMin);
      var width = initialWidth + delta; // apply updated styles to the applicable DOM nodes

      updateResizeAreaPosition(mutationRefs, width); // NOTE: hijack the maual resize and force collapse, cancels mouse events

      if (event.clientX < 0) {
        _this.setState({
          width: _constants.CONTENT_NAV_WIDTH_COLLAPSED
        });

        _this.handleResizeEnd();
      } else {
        // maintain internal width, applied to navigation state on resize end
        _this.setState({
          delta: delta,
          width: width
        });
      }
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleResizeEnd", function () {
      var _this$props2 = _this.props,
          navigation = _this$props2.navigation,
          createAnalyticsEvent = _this$props2.createAnalyticsEvent;
      var _this$state2 = _this.state,
          delta = _this$state2.delta,
          didDragOpen = _this$state2.didDragOpen,
          isDragging = _this$state2.isDragging,
          currentWidth = _this$state2.width;
      var expandThreshold = 24;
      var resizerClicked = !isDragging && !_this.invalidDragAttempted;
      var publishWidth = currentWidth;
      var shouldCollapse = false; // check if the intention was just a click, and toggle

      if (resizerClicked) {
        publishWidth = Math.max(_constants.CONTENT_NAV_WIDTH, currentWidth);

        _this.toggleCollapse('resizerClick');
      } // prevent the user from creating an unusable width


      if (publishWidth < _constants.CONTENT_NAV_WIDTH) {
        publishWidth = _constants.CONTENT_NAV_WIDTH;

        if (didDragOpen && delta > expandThreshold) {
          shouldCollapse = false;
        } else if (currentWidth < _constants.GLOBAL_NAV_COLLAPSE_THRESHOLD) {
          shouldCollapse = true;
        }
      } else {
        shouldCollapse = navigation.state.isCollapsed;
      }

      if (!resizerClicked && (didDragOpen && !shouldCollapse || !didDragOpen && shouldCollapse)) {
        (0, _analytics.navigationExpandedCollapsed)(createAnalyticsEvent, {
          trigger: 'resizerDrag',
          isCollapsed: shouldCollapse
        });
      } // reset everything


      _this.invalidDragAttempted = false;

      _this.setState({
        didDragOpen: false,
        isDragging: false,
        mouseIsDown: false,
        width: publishWidth
      }); // publish the new width, once resizing completes


      navigation.manualResizeEnd({
        productNavWidth: publishWidth,
        isCollapsed: shouldCollapse
      });

      if (shouldResetGrabArea(currentWidth)) {
        updateResizeAreaPosition(_this.props.mutationRefs, _constants.CONTENT_NAV_WIDTH);
      } // cleanup


      window.removeEventListener('mousemove', _this.handleResize);
      window.removeEventListener('mouseup', _this.handleResizeEnd);
    });
    return _this;
  }

  (0, _createClass2.default)(ResizeControl, [{
    key: "render",
    value: function render() {
      var _this$state3 = this.state,
          isDragging = _this$state3.isDragging,
          mouseIsDown = _this$state3.mouseIsDown,
          mouseIsOverGrabArea = _this$state3.mouseIsOverGrabArea,
          showGrabArea = _this$state3.showGrabArea;
      var _this$props3 = this.props,
          collapseToggleTooltipContent = _this$props3.collapseToggleTooltipContent,
          expandCollapseAffordanceRef = _this$props3.expandCollapseAffordanceRef,
          flyoutIsOpen = _this$props3.flyoutIsOpen,
          isResizeDisabled = _this$props3.isDisabled,
          isGrabAreaDisabled = _this$props3.isGrabAreaDisabled,
          onMouseOverButtonBuffer = _this$props3.onMouseOverButtonBuffer,
          navigation = _this$props3.navigation;
      var isCollapsed = navigation.state.isCollapsed; // the button shouldn't "flip" until the drag is complete

      var ButtonIcon = _chevronLeft.default;
      if (isCollapsed) ButtonIcon = _chevronRight.default;
      var button = (0, _core.jsx)(Button, {
        onClick: this.onResizerChevronClick,
        onMouseDown: preventDefault,
        hitAreaSize: onMouseOverButtonBuffer ? 'large' : 'small' // maintain styles when user is dragging
        ,
        isVisible: isCollapsed || mouseIsDown,
        hasHighlight: mouseIsDown || mouseIsOverGrabArea,
        innerRef: expandCollapseAffordanceRef,
        "aria-expanded": !isCollapsed,
        "aria-label": "Toggle navigation"
      }, (0, _core.jsx)(ButtonIcon, null));
      var shadowDirection = flyoutIsOpen ? 'to right' : 'to left';
      return (0, _core.jsx)(Outer, null, isDragging && (0, _core.jsx)(BodyDragCursor, null), (0, _core.jsx)(_primitives.Shadow, {
        direction: shadowDirection,
        isBold: mouseIsDown
      }), !isResizeDisabled && (0, _core.jsx)(_react.Fragment, null, !isGrabAreaDisabled && showGrabArea && (0, _core.jsx)(GrabArea, {
        isBold: mouseIsDown,
        showHandle: mouseIsDown || mouseIsOverGrabArea,
        onMouseEnter: this.mouseEnterGrabArea,
        onMouseLeave: this.mouseLeaveGrabArea,
        onMouseDown: this.handleResizeStart
      }), (0, _core.jsx)("div", {
        onMouseOver: !flyoutIsOpen ? onMouseOverButtonBuffer : null
      }, collapseToggleTooltipContent ? (0, _core.jsx)(_tooltip.default, {
        content: makeTooltipNode(collapseToggleTooltipContent(isCollapsed)),
        delay: 600,
        hideTooltipOnClick: true,
        position: "right"
      }, button) : button)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var EXPERIMENTAL_FLYOUT_ON_HOVER = props.experimental_flyoutOnHover,
          flyoutIsOpen = props.flyoutIsOpen,
          navigation = props.navigation;
      var isCollapsed = navigation.state.isCollapsed; // resolve "hover locking" issue with resize grab area

      if (EXPERIMENTAL_FLYOUT_ON_HOVER) {
        var showGrabArea = !isCollapsed && !flyoutIsOpen;
        var mouseIsOverGrabArea = showGrabArea ? state.mouseIsOverGrabArea : false;
        return {
          mouseIsOverGrabArea: mouseIsOverGrabArea,
          showGrabArea: showGrabArea
        };
      }

      return null;
    }
  }]);
  return ResizeControl;
}(_react.PureComponent);

exports.ResizeControlBase = ResizeControl;
(0, _defineProperty2.default)(ResizeControl, "defaultProps", {
  isGrabAreaDisabled: false
});

var _default = (0, _analyticsNext.withAnalyticsEvents)()(ResizeControl);

exports.default = _default;